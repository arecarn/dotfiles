[core]
    excludesfile = ~/dotfiles/.gitfiles/gitignore_global
[diff]
    tool = vimdiff
[difftool]
    prompt = false
[alias]
    d = diff --color
    ds = diff --color --cached # Diff Staged

    dt = difftool
    dts = difftool --cached # Diff Tool Staged

    m = merge
    mt = mergetool

    b = branch
    ba = branch --all --verbose # Branch All
    bd = branch -d # Branch Delete
    bD = branch -D # Branch Delete
    bdu = push origin --delete # Branch Delete Upstream
    bc = checkout -b # Branch Create
    bcu = push origin --set-upstream HEAD # Branch Create Upstream

    cm = commit
    cmm = commit --message
    cmfu = commit --fixup
    cma = commit --amend

    # execute an arbitrary command in the top level directory e.g.
    # $ git exec pwd
    exec = "!f() {\
                GIT_TOP=\"${GIT_DIR%%/.git/modules/*}\"; \
                [ \".$GIT_TOP\" != \".$GIT_DIR\" ] && cd \"$GIT_TOP\"; \
                exec \"$@\"; \
            }; f"

    f = fetch
    co = checkout
    sh = show --decorate --stat

    st = stash
    sts = stash show --patch --stat
    stp = stash pop
    std = stash drop
    stash-list-pretty = stash list --pretty=format:'%C(yellow)%gd%Creset %s'
    stl = !git stash-list-pretty

    s =  "!~/dotfiles/.gitfiles/alias/status_short.sh"
    ss = "!~/dotfiles/.gitfiles/alias/status_long.sh"

    a = add
    aa = add -A # Add All
    amd = add --update :/ # Add Modified files
    as = update-index --again # Add Staged files that need to be updated: files that need to be updated

    rs = reset
    rsh = reset HEAD

    rb =  rebase
    rbi = rebase --interactive --autosquash
    rbc = rebase --continue
    rba = rebase --abort

    rl =  !git --no-pager reflog --max-count=20
    rll = reflog

    log-pretty = log --pretty=tformat:'%><(9)%C(yellow)%h%Creset %Cgreen%ad%Creset %><(15,trunc)%Cblue%an%Creset %s%C(auto)%d%Creset' --boundary --date=short
    l =   !git --no-pager log-pretty --max-count=10
    lu =  !git --no-pager log-pretty --graph --left-right @{upstream}...HEAD
    ll =  !git log-pretty
    lla = !git log-pretty --graph --all

    lg =  log --decorate --boundary
    lga = !git lg --graph --date-order --all

    rm = remote
    rms = remote show
    rmso = remote show origin

    sm = submodule
    smu = !git submodule update --init --recursive
    smur = !git smu --remote && git smco
    smco = "!git submodule foreach -q --recursive \
        'git checkout \
        $(git config -f $toplevel/.gitmodules submodule.$name.branch)'"

    # CLONe repo and its submodules and make sure they are initialized/updated
    clo = "!f() { git clone --recursive \"$@\" && git smu; }; f"
    # PULl only if a fast forward is possible, then  make sure submodules are updated
    pul = "!f() { git pull --ff --ff-only \"$@\" && git smu; }; f"

    cln = clean --force --interactive -d

    exists = ls-files --error-unmatch # does a file  exist in the repository?
[push]
    default = simple
[user]
    name = Ryan Carney
[include]
    path = ~/.gitconfig_local
[merge]
    conflictstyle = diff3
    tool = vimdiff
[mergetool]
    prompt = false
[fetch]
    prune = true

"RYAN CARNEY VIMRC                                                           {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set cpo&vim
set fileformats=unix,dos

let mapleader="\<Enter>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"OPERATING SYSTEM VARIABLES                                                  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let s:hasWindows = has("win16") || has("win32") || has("win64")
if s:hasWindows
    let s:vimpath = $HOME."/vimfiles"
    cd $HOME "start in home directory, this is just here for convince
else
    let s:vimpath = $HOME."/.vim"
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"PLUGINS MANAGEMENT                                                          {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"netrw{{{2
"aka the File Explorer. set up line numebring and other good stuff
let g:netrw_bufsettings = 'noma nomod rnu nobl nowrap ro'
"hide .swp .o12 .dbg .lst files in explorer
let g:netrw_list_hide= '.*\.swp$,.*\.o12$,.*\.dbg$,.*\.lst'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
"Nebundle{{{2
if has('vim_starting')
    let s:runtimepath = s:vimpath.'/bundle/neobundle.vim/'
    execute 'set runtimepath+='.s:runtimepath
endif

call neobundle#rc(expand(s:vimpath.'/bundle'))
" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
"Vimproc {{{2
NeoBundle 'Shougo/vimproc.vim', {
     \ 'build' : {
     \     'windows' : 'make -f make_mingw32.mak',
     \     'cygwin' : 'make -f make_cygwin.mak',
     \     'mac' : 'make -f make_mac.mak',
     \     'unix' : 'make -f make_unix.mak',
     \    },
     \ }
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'Shougo/neocomplcache' "{{{2
if !isdirectory(s:vimpath.'/utils_local/neocomplcache')
    mkdir(s:vimpath.'/utils_local/neocomplcache', "p", 0700)
endif
let g:neocomplcache_temporary_dir = s:vimpath.'/utils_local/neocomplcache'
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 1

" Sets minimum char length of syntax keyword.
let g:neocomplcache_min_syntax_length = 2
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
let g:neocomplcache_enable_auto_delimiter = 1
let g:neocomplcache_max_list = 8

augroup Ctags
    autocmd FileType c,cpp NeoComplCacheCachingTags
augroup END

let g:neocomplcache_tags_caching_limit_file_size= 100000000 "one million
" Define file-type dependent dictionaries.
let g:neocomplcache_dictionary_filetype_lists = {
            \ 'default' : '',
            \ 'vimshell' : s:vimpath.'/.vimshell_hist',
            \ 'scheme' : s:vimpath.'/.gosh_completions'
            \ }

" Define keyword, for minor languages
if !exists('g:neocomplcache_keyword_patterns')
    let g:neocomplcache_keyword_patterns = {}
endif
let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

imap <C-l>  <Plug>(neocomplcache_start_unite_complete)
imap <C-q>  <Plug>(neocomplcache_start_unite_quick_match)

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    " return neocomplcache#smart_close_popup() . "\<CR>"
    return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
    let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
nnoremap coneo :NeoComplCacheToggle<CR>
"neocomplcache""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'Shougo/neosnippet.vim' "{{{2
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)"
            \: "\<TAB>"
if has('conceal')
    set conceallevel=2 concealcursor=i
endif
NeoBundle 'Shougo/neosnippet-snippets'
let g:neosnippet#snippets_directory=s:vimpath.'/utils/snippets'
NeoBundle 'Shougo/neosnippet.vim'
"neosnippet"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'Shougo/unite.vim' "{{{2
let g:unite_winheight = 10
let g:unite_data_directory = s:vimpath.'/utils_local/unite/'
let g:unite_matcher_fuzzy_max_input_length = 1000
let g:unite_source_history_yank_enable = 1 "TODO this line is causing problems on windows :(
let g:unite_source_history_yank_limit = 10000
let g:unite_split_rule = 'botright'
let g:unite_source_file_rec_max_cache_files = 0
call unite#custom#source('file_rec,file_rec/async',
            \ 'max_candidates', 0)
call unite#custom#profile('files', 'filters', 'sorter_rank')
" call unite#filters#matcher_default#use(['matcher_fuzzy']) "TODO this line is causing problems on windows :(
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#source('file_rec,file_rec/async,file_mru,file,grep',
            \ 'ignore_pattern', join([
            \ '\.git',  '\.Trash', '\.ini$' ,'\.dbx$', '\.cache$'
            \ ], '\|'))
" For ack.
if executable('ack')
    let g:unite_source_grep_command = 'ack'
    let g:unite_source_grep_default_opts = '--no-heading --no-color -k -H'
    let g:unite_source_grep_recursive_opt = ''
endif
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
    imap <Silent><Buffer><Expr> <C-s> unite#do_action('split')
    imap <Silent><Buffer><Expr> <C-v> unite#do_action('vsplit')
    imap <Silent><Buffer><Expr> <C-t> unite#do_action('tabopen')
    imap <Silent><Buffer><Expr> <C-g> unite#do_action('goto')
endfunction
let g:unite_source_menu_menus = {}
let g:unite_source_menu_menus.test = {
            \     'description' : 'Interpreter Menu',
            \ }
let g:unite_source_menu_menus.test.command_candidates = [
            \   ['VimShell', 'VimShell -split'],
            \   ['bc', 'VimShellInteractive bc'],
            \   ['octave', 'VimShellInteractive octave'],
            \   ['python', 'VimShellInteractive python']
            \ ]

NeoBundle 'Shougo/unite-ssh'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'Shougo/unite-session'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'tsukkee/unite-help'
NeoBundle 'ujihisa/unite-colorscheme'
NeoBundle 'kmnk/unite-command'
NeoBundle 'majkinetor/unite-cmdmatch'
NeoBundle 'voi/unite-ctags'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'kopischke/unite-spell-suggest'
NeoBundle 'kmnk/vim-unite-giti'


nnoremap <TAB>g  :<C-u>Unite grep -no-resize -auto-preview<CR>
nnoremap <TAB>f  :<C-u>Unite file_rec/async -start-insert<CR>
nnoremap <TAB>r  :<C-u>Unite file_mru -start-insert<CR>
nnoremap <TAB>rg :<C-u>Unite register -vertical<CR>
nnoremap <TAB>b  :<C-u>Unite buffer -auto-resize<CR>
nnoremap <TAB>o  :<C-u>Unite outline -vertical<CR>
nnoremap <TAB>l  :<C-u>Unite line -start-insert<CR>
nnoremap <TAB>h  :<C-u>Unite help -start-insert<CR>
nnoremap <TAB>s  :<C-u>Unite session -auto-resize<CR>
nnoremap <TAB>ss :<C-u>UniteSessionSave<Space>
nnoremap <TAB>i  :<C-u>Unite menu:test -auto-resize<CR>
nnoremap <TAB>hc :<C-u>Unite cmdmatch history/command<CR>
nnoremap <TAB>hs :<C-u>Unite history/search<CR>
nnoremap <TAB>y  :<C-u>Unite history/yank<CR>
xnoremap <TAB>y  :<C-u>Unite history/yank<CR>
nnoremap <TAB>p  :<C-u>Unite process -start-insert -vertical<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'Shougo/vimfiler.vim' "{{{2
" Replace netrw commands with vimfiler
let g:loaded_netrw        = 1 " Disable netrw
let g:loaded_netrwPlugin  = 1 " Disable netrw
let g:vimfiler_as_default_explorer = 1  "make vimfiler the default explorer

command! -nargs=* Explore :VimFilerBufferDir <Args>
command! -nargs=* Sexplore :VimFilerBufferDir -split -horizontal <Args>
command! -nargs=* Vexplore :VimFilerBufferDir -split  <Args>
command! -nargs=* Texplore :VimFilerBufferDir -tab <Args>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'Shougo/vimshell.vim' "{{{2
nnoremap <TAB>vs :VimShellBufferDir -popup -toggle<CR>
let g:vimshell_vimshrc_path = s:vimpath.'/utils_local/vimshell/'

"Vimshell"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'Shougo/echodoc.vim' "{{{2
let g:echodoc_enable_at_startup=1
set cmdheight=2 "}}}2
"echodoc.vim""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'arecarn/frisk' "{{{2
call frisk#AddEngine('yahoo', 'http://search.yahoo.com/search?p=')
" NeoBundle  'frisk', {'type' : 'nosync',  'base' : '~/Dropbox/projects/frisk/' }
"

command! Rfrisk call ReloadFrisk()
"Do the stuff for crunch
function! ReloadFrisk()
    vs ~/Dropbox/projects/frisk/gc/frisk/plugin/frisk.vim
    wq
    vs ~/Dropbox/projects/frisk/gc/frisk/autoload/frisk/debug.vim
    wq
    vs ~/Dropbox/projects/frisk/gc/frisk/autoload/frisk.vim
    wq
    Runtime ~/Dropbox/projects/frisk/gc/frisk/plugin/*.vim
    Runtime ~/Dropbox/projects/frisk/gc/frisk/autoload/*.vim
    Runtime ~/Dropbox/projects/frisk/gc/frisk/autoload/frisk/*.vim
endfunction

"frisk""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'arecarn/crunch', 'Dev' "{{{2
" NeoBundle  'crunch', {'type' : 'nosync',  'base' : '~/Dropbox/projects/crunch'}

"crunch"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'godlygeek/tabular' "{{{2
"following filetype commands align linewise comments
nnoremap <Leader>a :Tabularize/
xnoremap <Leader>a :Tabularize/

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'nathanaelkane/vim-indent-guides' "{{{2
nmap <silent> coig <Plug>IndentGuidesToggle
let g:indent_guides_enable_on_vim_startup=0
let g:indent_guides_guide_size = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'scrooloose/syntastic' "{{{2
" let g:syntastic_check_on_open=1
let g:syntastic_python_checkers = ['python']
nnoremap cost :SyntasticToggleMode<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 't9md/vim-textmanip' "{{{2
xmap <C-j> <Plug>(textmanip-move-down)
xmap <C-k> <Plug>(textmanip-move-up)
xmap <C-h> <Plug>(textmanip-move-left)
xmap <C-l> <Plug>(textmanip-move-right)

" toggle insert/replace with <F10>
nmap comt <Plug>(textmanip-toggle-mode)
"textmanip""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 't9md/vim-quickhl' "{{{2
nmap <Leader>h <Plug>(quickhl-manual-this)
xmap <Leader>h <Plug>(quickhl-manual-this)
nmap <Leader>H <Plug>(quickhl-manual-reset)
xmap <Leader>H <Plug>(quickhl-manual-reset)
"quickhl""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 't9md/vim-choosewin' "{{{2
nmap <TAB>w <Plug>(choosewin)
let g:choosewin_overlay_enable = 1
let g:choosewin_overlay_clear_multibyte = 1
let g:choosewin_statusline_replace = 0
"choosewin""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'airblade/vim-gitgutter' "{{{2
highlight link GitGutterAdd          DiffAdd
highlight link GitGutterChange       DiffChange
highlight link GitGutterDelete       DiffDelete
highlight link GitGutterChangeDelete DiffDelete
nnoremap cogg :GitGutterToggle<CR>
let g:gitgutter_enabled = 0
let gittgutter_realtime = 1
let g:gitgutter_eager = 0
"gitgutter""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
NeoBundle 'merlinrebrovic/focus.vim' "{{{2
let g:focus_use_default_mapping = 0
nmap cof <Plug>FocusModeToggle
"}}}2
NeoBundle 'mbbill/undotree' "{{{2
nnoremap <TAB>ut :UndotreeToggle<CR>
"}}}2
NeoBundle 'dhruvasagar/vim-table-mode' "{{{2
let g:table_mode_separator = '|'
"}}}2
NeoBundle 'roman/golden-ratio'
"{{{2
let g:golden_ratio_autocommand = 0
nnoremap cogr :GoldenRatioToggle<CR>
"}}}2
NeoBundle 'junegunn/vader.vim'
NeoBundle 'LanguageTool'
"TODO make system independent 18 Mar 2014
let g:languagetool_jar = 'C:/bin/LanguageTool/languagetool-commandline.jar'
NeoBundle 'AndrewRadev/linediff.vim' "{{{2
xnoremap <Leader>ld :Linediff<CR>
"}}}2
NeoBundle 'thinca/vim-fontzoom' "{{{2
let g:fontzoom_no_default_key_mappings = 1
nnoremap  ]f <Plug>(fontzoom-larger)
nnoremap  [f <Plug>(fontzoom-smaller)
"}}}2
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'thinca/vim-textobj-between'
NeoBundle 'majutsushi/tagbar' "{{{2
nnoremap <TAB>tb :TagbarToggle<CR>
"}}}2
NeoBundle 'bling/vim-airline' "{{{2
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_powerline_fonts = 1 
"For refreshing airline
if !has('vim_starting')
    AirlineRefresh
    normal! gtgT
endif "}}}2
NeoBundle 'tommcdo/vim-lion'
NeoBundle 'Julian/vim-textobj-variable-segment'
NeoBundle 'TeTrIs.vim'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'coderifous/textobj-word-column.vim'
NeoBundle 'dbakker/vim-lint'
NeoBundle 'fugitive.vim'
NeoBundle 'hrsh7th/vim-neco-calc'
NeoBundle 'junegunn/seoul256.vim'
NeoBundle 'kana/vim-niceblock'
NeoBundle 'kana/vim-textobj-entire'
NeoBundle 'kana/vim-textobj-indent'
NeoBundle 'kana/vim-textobj-line'
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'mattn/vim-textobj-url' "{{{2
NeoBundle 'kana/vim-textobj-lastpat'
NeoBundle 'glts/vim-textobj-comment'
let g:textobj_comment_no_default_key_mappings = 1
xmap agc <Plug>(textobj-comment-a)
omap agc <Plug>(textobj-comment-a)
xmap igc <Plug>(textobj-comment-i)
omap igc <Plug>(textobj-comment-i)
"}}}2
NeoBundle 'morhetz/gruvbox'
NeoBundle 'saihoooooooo/vim-textobj-space'
NeoBundle 'tlvince/vim-compiler-python'
NeoBundle 'tommcdo/vim-exchange'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-scriptease'
NeoBundle 'tpope/vim-speeddating'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'tracyone/CCtree'
NeoBundle 'vim-scripts/DrawIt'
NeoBundle 'w0ng/vim-hybrid'
NeoBundle 'arecarn/Preserve.vim' "TODO Merge into the true one
NeoBundle 'tmhedberg/matchit'
NeoBundle 'chreekat/vim-paren-crosshairs'
NeoBundle 'talek/obvious-resize'
NeoBundle 'junegunn/vim-pseudocl'
NeoBundle 'junegunn/vim-oblique'
NeoBundle 'int3/vim-extradite'
NeoBundle 'gregsexton/gitv'
NeoBundle 'jaxbot/semantic-highlight.vim'
NeoBundle 'svermeulen/vim-easyclip'
let g:EasyClipUseSubstituteDefaults = 1
let g:EasyClipEnableBlackHoleRedirect = 0
nnoremap d "_d
vnoremap d "_d
noremap m d

" NeoBundle 'inside/vim-search-pulse' "TODO fix this so it works with vim-oblique
" let g:vim_search_pulse_mode = 'pattern'

" NeoBundle 'google/maktaba'
" NeoBundle 'glts/vim-magnum'
" Initializes all maktaba plugins.
" call maktaba#plugin#Detect()
" NeoBundle 'glts/vim-radical'

call neobundle#end()
NeoBundleCheck


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"FILE TYPE SETTINGS                                                          {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype on
filetype plugin on
filetype indent on
syntax on " allow syntax highlighting
set encoding=utf-8 "make Vim use UTF-8 by default

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"UI OPTIONS                                                                  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set colorcolumn=79
set cursorline
if has("autocmd")
    augroup CURSOR
        autocmd WinEnter * setlocal cursorline
        autocmd WinLeave * setlocal nocursorline
    augroup END
endif

set number
set relativenumber
set showcmd
set list
set lazyredraw
set laststatus=2 "allways show the status line
set listchars=trail:·,tab:»·,extends:→,precedes:←

"Maximize Window on Startup
if has ("gui_running")
    if has("autocmd") && s:hasWindows
        augroup windowsgui:
            autocmd GUIEnter * simalt ~x " maximize in windows
        augroup END
    else
    endif
endif

if has("autocmd")
    " Highlight TODO, FIXME, NOTE, etc.
    if v:version > 701
        autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\)')
        autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\)')
    endif
endif

"colorscheme""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""{{{2

if has ("gui_running")
    " colorscheme solarized
    colorscheme gruvbox
endif

if !has("gui_running")
    " colorscheme solarized
    colorscheme gruvbox
    let g:gruvbox_italic=0
endif

set background=dark "}}}

"gui settings"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""{{{2
if has ("gui_running")
    "Make GVim more like Terminal Vim
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand scroll bar
    set guioptions-=l "remove right-hand scroll bar
    set guioptions=c  "makes dialogs boxes appear like they do in console vim

    "Set Font
    if s:hasWindows
        set guifont=DejaVu_Sans_Mono_For_Powerline:h10:cANSI
        "set guifont=DejaVu_Sans_Mono:h10:cANSI,Lucida_Console:h9:cANSI,Consolas:h9:cANSI
    elseif has('mac')
        set guifont=DejaVu\ Sans\ Mono:h12
        " set guifont=Monaco:h12
    elseif has('unix') && !has('mac') "linux
        set guifont=DejaVu\ Sans\ Mono\ 10
    endif
endif "gui_running "}}}2

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
"CURSOR SETTINGS                                                             {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set scrolloff=6 " Keep 3 lines (top/bottom) for scope
set sidescrolloff=6 " keep 3 lines (side/side) for scope
set sidescroll=1
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"UNDO & SWAP                                                                 {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set undofile                " Save undos after file closes
let s:undodir = s:vimpath.'/utils_local/undo' " where to save undo histories
set undolevels=20000         " How many undo
set undoreload=20000         " number of lines to save for undo

execute 'set undodir='.s:undodir

" let s:swap=s:vimpath.'/utils_local/swap//'
set noswapfile
" execute 'set directory='.s:swap
" ^ Here be magic! Quoth the help: (from godlygeek)
" For Unix and Win32, if a directory ends in two path separators "//" or "\\",
" the swap file name will be built from the complete path to the file with all
" path separators substituted to percent '%' signs.  This will ensure file
" name uniqueness in the preserve directory.
set history=10000
set backup
"Make the back up file extension year-month-day_hour ex: file.txt_13-02-24_15
let myvar = strftime("%y-%m-%d_%H")
let myvar = "set backupext=_". myvar
execute myvar
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"BACKUP                                                                      {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let s:backupdir = s:vimpath.'/utils_local/backup'
execute 'set backupdir='.s:backupdir

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"LINE WRAPPING                                                                {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nowrap "When on, lines longer than the width of the window will wrap and
set linebreak " wrap on complete words
let g:d_tw = 78
let &textwidth= g:d_tw "max length of line to be inserted. 0 will not break on space
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"SPELLING - THESAURUS                                                        {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set spell
set spelllang=en_us
let &spellfile=s:vimpath.'/utils/spell/spellfile.add'
let &thesaurus=s:vimpath.'/utils/thesaurus/thesaurus.txt'


"TODO make "Scripts" to go though all misspellings words and fix them
nnoremap <silent> <Plug>FixSpelling 1z=
            \:call repeat#set("\<Plug>FixSpelling")<CR>
nmap csf <Plug>FixSpelling

nnoremap csl z=
nnoremap csa :spellrepall<CR>
nnoremap csc t<space>a<C-x><C-s>
nnoremap cst t<space>a<C-x><C-t>
nnoremap csd t<space>a<C-x><C-k>
inoremap <C-F> <ESC>[s1z=gi<C-o>
nnoremap ]fs ]s:sleep 300m<CR>1z=
nnoremap [fs [s:sleep 300m<CR>1z=

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"TEMPLATE MAPPINGS                                                           {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"make using Templates easier
let s:templatefile = s:vimpath.'/utils/template/'
execute 'command! Etemplates :e '. s:templatefile
if has("autocmd")
    augroup template
        autocmd!
        execute 'autocmd BufNewFile includes.h 0r '.s:templatefile.'skeleton_master.h'
        execute 'autocmd BufNewFile *.Tex      0r '.s:templatefile.'skeleton.Tex'
    augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"MAPPINGS & COMMANDS                                                        {{{1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set timeout
set timeoutlen=500
set updatetime=1000 "how long it takes for the preview to show up in ms

"Navigation"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""{{{2
"cursor moves as expected for wrapped lines
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

"map F9 - F12 (like hjkl) to resize windows
nnoremap  <F9>  :ObviousResizeLeft<CR>
nnoremap  <F10> :ObviousResizeDown<CR>
nnoremap  <F11> :ObviousResizeUp<CR>
nnoremap  <F12> :ObviousResizeRight<CR>
"}}}2

"TOGGLE OPTIONS"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""{{{2
nnoremap cop :set paste!<CR>:set paste?<CR>
nnoremap <silent> cotw :if &tw==0<CR>:set tw=78<CR>:else<CR>:set tw=0<CR>:endif<CR>:set tw?<CR>
"}}}2

"update diff with a key mapping
nnoremap du :diffupdate<CR>
nnoremap <silent> <leader>dt :PreserveSave<CR>:%s,\s\+$,,ge<CR>:PreserveRestore<CR>
nnoremap <silent> <C-l> :redraw!<CR><C-l>

nnoremap <TAB>rc :e $MYVIMRC<CR>

" nmap gb :call Go2Buff("forward", v:count)<CR>
" nmap gB :call Go2Buff("backward", v:count)<CR>

" function! Go2Buff(forwardOrBackward, count)
"     echom a:count. " this is the count"
"     if a:count == 0
"         if a:forwardOrBackward == "forward"
"             execute "normal! :bn\<CR>"
"         elseif a:forwardOrBackward == "backward"
"             execute "normal! :bp\<CR>"
"         endif
"     else
"         execute "normal! :".a:count."b\<CR>"
"     endif
" endfunction

nnoremap <leader>m  :call SearchPosition()<CR>
function! SearchPosition()
    if @/ !~ '\v(\\\%\d+[lc](\\\|)?)+'
        let @/ = ''
        " echo "pattern didn't match = ".@/
    else
        let @/ .= '\|'
        " echo "added bar = ".@/
    endif

    let line = getpos('.')[1]
    let col = getpos('.')[2]
    execute "let @/ .= '\\%".line."l'"
    execute "let @/ .= '\\%".col."c'"
endfunction

nnoremap <C-W>d :bd<CR>

" make more undoes possible after leaving insert mode
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>
inoremap <BS> <C-g>u<BS>
inoremap <Del> <C-g>u<Del>
inoremap <END> <C-g>u<END>

"Yank till end of line
noremap Y y$

nnoremap =ae :call Preserve("normal! gg=G")<CR>
nnoremap =ie :call Preserve("normal! gg=G")<CR>
nnoremap yae :call Preserve("normal! ggyG")<CR>
nnoremap yie :call Preserve("normal! ggyG")<CR>


nnoremap <Leader>gcd :cd! %:h<Cr>:pwd<Cr>
nnoremap <Leader>cd :lcd! %:h<Cr>:pwd<Cr>
nnoremap <leader>e :e **/*
nnoremap <leader>f :find<SPACE>*

nnoremap <Leader>yf :let @f=expand('%:p')<CR>:echo @f.' ---> yanked into register f'<CR>
nnoremap <Leader>yd :let @f=expand('%:h')<CR>:echo @f.' ---> yanked into register f'<CR>

"navigation in command line
cnoremap <C-j> <DOWN>
cnoremap <C-k> <UP>
cnoremap <C-h> <LEFT>
cnoremap <C-l> <RIGHT>
cnoremap <C-a> <HOME>
cnoremap <C-e> <END>

cnoremap <C-y> <SPACE><BS><TAB>

"split a line
nnoremap S i<cr><esc>k$
"nmap <C-S> Sjddkkp

nnoremap <C-J> ddpkJ

cabbrev %f <C-r>=expand('%:p')<CR>
cabbrev %d <C-r>=expand('%:h')<CR>/

" disable Ex mode key and map it to something awesome
nnoremap Q @q
" replay macro for each line of a visual selection
xnoremap Q :normal! @q<CR>
" repeat last command for each line of a visual selection
xnoremap . :normal! .<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"SCRIPTS                                                                     {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"reverse the selected lines (TODO don't work for line at the top of a file)
xnoremap gr <ESC>'<mr'>:'r+1,.g/^/m 'r<CR>
command!  PreviewTagToggle call PreviewWordToggle()
nnoremap <Leader>tp :ptjump <C-r><C-w><CR>
"Compile()""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""{{{2
"save everything and then gcc the current file then run the file returned by
"gcc
command! Gcc call Compile('gcc\ %\ -o\ %:t:r', 'gcc', 'exe')
command! Gpp call Make()
command! Csc call Compile('csc\ %', 'cs', 'exe')

command! Py cd %:p:h|compiler python|make|cwindow

function! Compile(MakeProgram, Compiler, excutable)
    let s:oldmakeprg = &makeprg
    execute "set makeprg=" . a:MakeProgram
    execute "compiler " . a:Compiler
    let s:filename = expand("%:t:r")
    echo s:filename
    wa
    lcd %:p:h
    make!
    cclose
    cwindow
    if &buftype != "quickfix"
        if exists(':VimShellSendString')
            wincmd p
            VimShellBufferDir -popup
            resize 10
            wincmd p
            if s:hasWindows
                execute "VimShellSendString exe " . s:filename . ".exe"
            else
                execute "VimShellSendString exe ./" . s:filename
            endif
        elseif s:hasWindows
            execute "!" . s:filename . ".exe"
        else "linux
            echom "help fix me!!!!!!!!!!!!!!!!!!!"
            execute "!./" . s:filename
        endif
    else
    endif

    let &makeprg= s:oldmakeprg
endfunction

function! Make()
    let s:oldmakeprg = &makeprg
    let &makeprg='[[ -f Makefile ]] && make || make -C'
    lcd %:p:h
    wa
    execute make!
    cclose
    cwindow
    if &buftype != "quickfix"
        if exists(':VimShellSendString')
            wincmd p
            VimShellBufferDir -popup
            resize 10
            wincmd p
            if s:hasWindows
                execute "VimShellSendString exe mycpp.exe"
            else
                execute "VimShellSendString exe ./mycpp"
            endif
        elseif s:hasWindows
            execute "!mycpp.exe"
        else "linux
            echo not working
            execute "!mycpp"
        endif
    else
    endif

    let &makeprg= s:oldmakeprg
endfunction!


function! SetMkfile()
    let filemk = "Makefile"
    let pathmk = "./"
    let depth = 1
    while depth < 4
        if filereadable(pathmk . filemk)
            return pathmk
        endif
        let depth += 1
        let pathmk = "../" . pathmk
    endwhile
    return "."
endfunction

" command! -nargs=* Make tabnew | let mkpath = SetMkfile() | make <Args> -C $mkpath | cwindow 10

function! Maker(args)
    wall
    wall
    cd %:p:h
    let mkpath = SetMkfile()
    execute 'make!'.a:args.' -C '.mkpath
    cclose
    cwindow
    if &buftype != "quickfix"
        if exists(':VimShellSendString') && s:hasWindows
            wincmd p
            VimShellBufferDir -popup
            wincmd K
            resize 10
            wincmd p
            if s:hasWindows
                execute "VimShellSendString exe mycpp.exe"
            else
                execute "VimShellSendString exe ./mycpp"
            endif
        elseif s:hasWindows
            execute "!mycpp.exe"
        else "linux
            execute '!./mycpp'
        endif
    else
    endif
endfunction

command! -nargs=* Maker call Maker('<Args>')

command! -nargs=* MyMake make! <Args> | cwindow

"Compile()""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
"Crunch Dev Scripts"""""""""""""""""""""""""""""""""""""""""""""""""""""""""{{{2
command! Rcrunch call ReloadCrunch()
"Do the stuff for crunch
function! ReloadCrunch()
    vs ~/Dropbox/projects/crunch/crunch/autoload/crunch/debug.vim
    wq
    vs ~/Dropbox/projects/crunch/crunch/autoload/crunch.vim
    wq
    vs ~/Dropbox/projects/crunch/crunch/plugin/crunch.vim
    wq
    Runtime ~/Dropbox/projects/crunch/crunch/plugin/*.vim
    Runtime ~/Dropbox/projects/crunch/crunch/autoload/*.vim
    Runtime ~/Dropbox/projects/crunch/crunch/autoload/crunch/*.vim
endfunction

command! TcrunchS call TestCrunchShell()
function! TestCrunchShell()
    if s:hasWindows
        !runVimTests \Users\arecarn\Dropbox\projects\crunch\crunch\tests
    else
        !runVimTests.sh  ~/Dropbox/projects/crunch/crunch/tests
    endif
endfunction

command! TcrunchVs call TestCrunchVShell()
function! TestCrunchVShell()
    call ReloadCrunch()
    RunVS runVimTests C:/Users/arecarn/Dropbox/projects/crunch/crunch/tests
    if s:hasWindows
        RunVSrunVimTests C:\Users\arecarn\Dropbox\data\code\VimScript\myplugins\crunch\tests
    else
        RunVS runVimTests.sh  ~/Dropbox/projects/crunch/crunch/tests
    endif
endfunction

"do crunch tests
if s:hasWindows
    nnoremap <Leader>ct :!cd \Users\arecarn\Dropbox\repos\crunch\crunch\ && gvim -u .vimrc_minimal +Vader*<CR>
    nnoremap <Leader>tc :!cd \Users\arecarn\Dropbox\repos\crunch\crunch\ && gvim -u .vimrc_minimal<CR>
else
    nnoremap <Leader>ct :!cd ~/Dropbox/repos/crunch/crunch && /usr/local/bin/vim -u .vimrc_minimal +Vader\*<CR>
    nnoremap <Leader>tc :!cd ~/Dropbox/repos/crunch/crunch && /usr/local/bin/vim -u .vimrc_minimal<CR>
endif

"Crunch Dev Scripts"""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
"Run in VimShell""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""{{{2
command! -nargs=* VshSend call RunInVimShell('<Args>')
function! RunInVimShell(cmd)
    VimShellBufferDir -popup
    execute "VimShellSendString " . a:cmd
endfunction
"Run in VimShell""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
" s:PrintDebugHeader()                                                    {{{2
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:PrintDebugHeader(text)
    if s:debug
        echom repeat(' ', 80)
        echom repeat('=', 80)
        echom a:text." Debug"
        echom repeat('-', 80)
    endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
" s:PrintDebugMsg()                                                       {{{2
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! s:PrintDebugMsg(text)
    if s:debug
        echom a:text
    endif
endfunction
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2

"add numbers to the front or end of a line
cabbrev numend s/$/\=1-line("'<")+line(".")/c
cabbrev numfront s/^/\=1-line("'<")+line(".")/c


"Details:
"s/\d\+/ : Match one or more digits (\d\+) on any line (:%) and substitute (s).
"            \= : for each match, replace with the result of the following expression:
"printf("0x%04x", : produce a string using the format "0x%04x", which corresponds to a literal 0x followed by a four digit (or more) hex number, padded with zeros.
"submatch(0) : The result of the complete match (i.e. the number).
cabbrev tohex s/\d\+/\=printf("0x%x", submatch(0))
"find the first occurrence of a hex digit and changes it to decimal
cabbrev todec s/0x\x\+/\=printf("%d", submatch(0))
cabbrev toasc s/0x\x\+/\=printf("%c", submatch(0))
"delete the current character and replace it with it's ASCII Decimal value
nnoremap <Leader>tad xi<C-r>=printf("%d",char2nr("<C-r>""))<CR><ESC>
"delete the current character and replace it with it's ASCII Hex value
nnoremap <Leader>tah xi<C-r>=printf("0x%x",char2nr("<C-r>""))<CR><ESC>
"noremap <Leader>cs  :s/./\=printf("Ox%x + ",char2nr("submatch(0)"))/gc<CR>
"
vnoremap <silent> <leader>is :<c-u>let old_reg_a=@a<cr>
            \:let old_reg=@"<cr>
            \gv"ay
            \:let @a=substitute(@a, '.\(.*\)\@=',
            \ '\=@a[strlen(submatch(1))]', 'g')<CR>
            \gvc<C-R>a<Esc>
            \:let @a=old_reg_a<CR>
            \:let @"=old_reg<CR>

nmap <silent> gM :set opfunc=MixedCase<CR>g@
vmap <silent> gM :<C-U>call MixedCase(visualmode(), 1)<CR>

function! MixedCase(type, ...)
    let saveReg = getreg('"')
    let saveRegMode = getregtype('"')
    let sel_save = &selection
    let &selection = "inclusive"

    if a:0  " Invoked from Visual mode, use '< and '> marks.
        silent exe "normal! `<" . a:type . "`>y"
    elseif a:type == 'line'
        silent exe "normal! '[V']y"
    elseif a:type == 'block'
        silent exe "normal! `[\<C-V>`]y"
    else
        silent exe "normal! `[v`]y"
    endif

<<<<<<< HEAD
    call setreg('"', substitute(@", '\w\+', '\u\L&', 'g'), a:type)
=======
    let reg_save_x = @x
    let @x = @@

    let @x = substitute(@x, '\w\+', '\u\L&', 'g')
>>>>>>> 84c314737065c0e42213f39d787f8f2798132250
    "don't capitalize the  t in can't or the re in your're
    call setreg('"', substitute(@", '\w\+', '\u&', 'g'), a:type)

    normal! gv""p
    set nohlsearch

    let &selection = sel_save
    call setreg('"', saveReg, saveRegMode)
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"TABS, INDENTING & FORMAT OPTIONS                                            {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set expandtab     " causes spaces to be used instead of tabs
set tabstop=4     " sets how big tabs are.
set shiftwidth=4  " how much space to add or remove using indent command
set softtabstop=4 " fine tunes the amount of white space to be inserted
set smarttab

set autoindent
set formatoptions+=n
set formatoptions+=j

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"FOLDING                                                                     {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"NeatFoldText()"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""{{{2
function! NeatFoldText()
    let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count = v:foldend - v:foldstart + 1
    let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
    " let foldchar = matchstr(&fillchars, 'fold:\zs.')
    let foldchar = '_'
    let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
    let foldtextend = lines_count_text . repeat(foldchar, 8)
    let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
"NeatFoldText()"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}2
set foldtext=NeatFoldText()
set foldmethod=indent
set foldcolumn=2
set foldnestmax=1
set foldlevelstart=99

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"AUTOCMDS                                                                    {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
    augroup vimrc
        autocmd!
        autocmd BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC
    augroup END

    augroup AllFiles
        autocmd!
        autocmd FocusLost * silent! wall
    augroup END

    augroup QuickFix
        autocmd!
        autocmd FileType qf wincmd J "opens quick fix window on the bottom of all screens
    augroup END

    if s:hasWindows
        augroup TEX
            autocmd!
            autocmd BufEnter *.tex setf tex
            "autocmd BufWritePost *.tex cd %:p:h | !start /min pdflatex %:t
            autocmd BufWritePost *.tex cd %:p:h | !start pdflatex %:t
            autocmd BufEnter *.tex setlocal concealcursor=
        augroup END
    else
        augroup TEX
            autocmd!
            autocmd BufWritePost *.tex cd %:p:h | !pdflatex %:t
            autocmd BufEnter *.tex setlocal concealcursor=
        augroup END
    endif
endif

function! PrintCscopeOptions()
    echo "g: Definition"
    echo "c: Functions calling this function"
    echo "d: Functions called by this function"
    echo "f: This file"
    echo "i: Files #including this file"
    echo "s: This C symbol"
    echo "t: This text string"
    echo "e: This egrep pattern"
endfunction
execute "nnoremap <Leader>cs :call PrintCscopeOptions()<CR>:cs find  "

set cscoperelative

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"SEARCHING                                                                   {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wrapscan
set incsearch
set ignorecase
set smartcase
set path=**/*

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"GENERAL BEHAVIOR                                                            {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set clipboard=unnamedplus,unnamed
set splitright

"disable dang error{visual}bells for good
if has("autocmd")
    augroup noBells
        autocmd!
        autocmd GUIEnter * set vb t_vb=
        autocmd VimEnter * set vb t_vb=
    augroup END
endif

set switchbuf=usetab
set shortmess+=a
set autowriteall

"automatically read file when it's changed outside of vim
set autoread
augroup autoread
    autocmd CursorHold * call Timer()
augroup END
function! Timer()
    if expand("%") == "[Command Line]"
    else
        call feedkeys("f\e")
        checktime
    endif
endfunction

set updatetime=5000  " milliseconds
set confirm
set backspace=indent,eol,start
set tags=tags;/ "the ";/" allows you to look back wards
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"COMPLETION                                                                  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildmode=full
set wildmenu
set completeopt=menuone,menu,preview
set wildcharm=<TAB>
set wildignore=*.o,*.obj,*.pyc,*~,*.git,*.hg*,*.svn,*.DS_Store

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"TESTING                                                                     {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd CursorMoved * let s:VisualMode = mode()

command! -range=0 VTest call FuncName(<Count>, <Line1>, <Line2>)

function! FuncName(count, firstLine, lastLine)

    echomsg 'count line = ['.a:count.']'
    echomsg 'first line = ['.a:firstLine.']'
    echomsg 'last line = ['.a:lastLine.']'

    echomsg 'visual first line = ['.line("'<").']'.' pos = ['.string(getpos("'<")).']'
    echomsg 'visual last line = ['.line("'>").']' .' pos = ['.string(getpos("'>")).']'

    echomsg 'number of lines in the file = ['.line('$').']'

    if a:count == 0 "no range given
        echomsg "do stuff for no given range"

    else
        if s:VisualMode  =~ '\vV|v|' "range was given
            echomsg "do stuff for visual selection"
        else
            echomsg "do stuff for normal range"
        endif
    endif
endfunction

function! RangeTest(firstLine, lastLine, count, bang) range

    echomsg 'bang = ['.a:bang.']'
    echomsg 'count line = ['.a:count.']'
    echomsg 'first line = ['.a:firstLine.']'
    echomsg 'last line = ['.a:lastLine.']'

    echomsg 'visual first line = ['.line("'<").']'.' pos = ['.string(getpos("'<")).']'
    echomsg 'visual last line = ['.line("'>").']' .' pos = ['.string(getpos("'>")).']'

    echomsg 'number of lines in the file = ['.line('$').']'

endfunction

" command! -range Test  <Line1>,<Line2> call RangeTest()

command! -range=-0 -bang Test  call RangeTest(<Line1>,<Line2>,<Count>,"<Bang>")

" xnoremap : :<C-w>let g:cameFromVisual = 1<CR>:echomsg 'from v ='.g:cameFromVisual<CR>gv:
" nnoremap : :<C-w>let g:cameFromVisual = 0<CR>:echomsg 'from v ='.g:cameFromVisual<CR>:



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
"FINAL SETTINGS                                                              {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
source ~/.vimrc_local

set  modeline
" vim: textwidth=78
" vim: foldmethod=marker
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

[user]
    name = Ryan Carney

    # in v2.8+ get user.name and user.email only from the config
    useConfigOnly = true

[push]
    # `simple` is default in v2.0+ and was added v1.7.10. Push mode `simple`
    # only pushes current branch to the one that git pull would pull from only
    # if the names match. The old default before v2.0 was `matching` option
    # means git will push all of your local branches to matching one in the
    # remote. For these older version of git the `current` mode is most similar
    # it pushes to or creates-then-pushes-to same-named branches on the remote
    # repo for you if they don't exist already
    default = simple

    # Also Push relevant annotated tags (Added in v2.4.1)
    followTags = true
    # recurseSubmodules = on-demand

[mergetool "nvim"]
    # define command which will be used when "nvim" is set as a merge tool
    cmd = nvim -f -c \"Gdiffsplit!\" \"$MERGED\"

[merge]
    # set "nvim" as tool for merging
    tool = nvim

[mergetool]
    # automatically launch merge tool without displaying a prompt
    prompt = false

[pull]
    ff=only

[log]
    decorate = short

[stash]
    # This doesn't seem to work when --stat is also passed to git show stash
    showPatch = true

[rebase]
    autoStash = true
    autoSquash = true

[mergetool]
    prompt = false

[fetch]
    prune = true

[core]
    excludesFile = ~/.config/git/gitignore_global

    # hooksPath was added in v2.9+
    hooksPath = ~/.config/git/hooks

[commit]
    template = ~/.config/git/gitmessage

    # not sure how to achieve the effect of passing --verbose twice here,
    # setting the value to 2 doesn't seem to work, like documented.
    verbose = true

[rerere]
    enabled = true # record merge resolutions that git can reuse later
    autoupdate = true # auto stage files that have been resolved by rerere

[diff]
  tool = nvim_dirdiff_difftool
  # submodule = diff

[difftool "nvim_dirdiff_difftool"]
    cmd = "nvim -f '+next' '+execute \"DirDiff\" argv(0) argv(1)' \"$LOCAL\" \"$REMOTE\""
    prompt = false

[difftool "nvim_difftool"]
    cmd = "nvim -d \"$LOCAL\" \"$REMOTE\""

[credential]
    # don't re-prompt for credentials for N seconds
    helper = store

[alias]
    hash = rev-parse --verify HEAD
    h = !git hash # Hash
    hs = !git hash --short # Hash Short

    executable = update-index --chmod=+x

    d = diff --color
    dr = !git d @{upstream}...HEAD
    da = diff --color --cached # Diff Added
    dar = !git da @{upstream}...HEAD # Diff Added Remote

    dt = difftool --dir-diff
    dta = !git dt --cached # Diff Tool Added

    m = merge
    ma = merge --abort
    mc = merge --continue
    mt = mergetool

    b = branch
    bl = !git --no-pager branch --verbose --verbose # Branch List
    bll = !git --no-pager branch --all --verbose --verbose # Branch List Long
    # Branch List Verbose (This is a work in progress)
    blv = for-each-ref --sort=committerdate refs/ --format='%(HEAD) %(color:green)%(committerdate:short)%(color:reset) %(color:yellow)%(objectname:short)%(color:reset) %(refname:short) %(color:blue)%(authorname)%(color:reset) %(contents:subject)'
    # Branches that are Merged
    blm =  !echo 'Merged Branches:'    && git --no-pager bl --merged
    bllm =  !echo 'Merged Branches:'    && git --no-pager bll --merged
    # Branches that are  Un-Merged
    blum = !echo ' Unmerged Branches:' && git --no-pager bl --no-merged
    bllum = !echo ' Unmerged Branches:' && git --no-pager bll --no-merged


    bd = branch --delete # Branch Delete
    bD = branch --delete --force # Branch Delete force
    # Branch Delete Merged
    bdm = "!f() { git branch --merged \"${1}\" | grep -v '^[ *]*'\"${1}\"'$' | sed 's/^\\s\\+//g' | xargs -r -d'\\n' git branch --delete; }; f"

    # Branch Delete Remote
    # Usage: git bdr <remote-name> <branch-name>
    bdr = push --delete

    # Branch Delete Both (local and remote)
    # Usage: git bdb <remote-name> <branch-name>
    bdb = !git branch-delete-both

    bc = checkout -b # Branch Create
    bco = checkout --orphan # Branch Create Orphan (empty branch)

    # Branch Create Remote
    # Usage: git bcr <remote-name> <branch-name>
    bcr = !git branch-create-remote

    # Branch Create Both (local and remote)
    # Usage: git bcb <remote-name> <branch-name>
    bcb = !git branch-create-both

    # Branch Set Remote tracking branch
    # Usage: git bsr <remote-name>
    bsr = !git branch-set-remote

    ta = tag --annotate
    tam = tag --annotate -m
    tl = tag --format='%(color:yellow)%(refname:short)%(color:reset) %(color:green)%(authordate:short)%(color:reset) %(color:blue)%(authorname)%(color:reset) %(subject)' --list -n
    td = tag --delete
    tdr = push --delete # Tag Delete Remote

    # the --verbose flag is equivalent to setting the commit.verbose option
    # but this option is only supported in git v2.9+ so the flag is included in
    # the following aliases instead
    cm = commit --verbose
    cmm = !git cm --message
    cmfu = !git cm --fixup
    cmsq = !git cm --squash
    cma = !git cm --amend --reset-author
    cmanm = !git cma --no-edit # Commit Amend No Message

    f = fetch --all --tags
    ff = !git f --force
    co = checkout

    sh = show --decorate --stat --patch # Show
    shdt = !git dt "${1:-HEAD}~..${1:-HEAD}" # Show with Diff Tool

    st = stash save
    stka = stash save --keep-index # Stash Keep Added (keep files in the staging area)
    sta = stash save --include-untracked # Stash All including untracked files
    stA = stash save --all # Stash All incline untracked and ignored files
    stsh = stash show --patch --stat
    stp = stash pop
    stpf = checkout stash -- . # Stash Pop Force even if there would be merge conflicts
    std = stash drop
    stash-list-pretty = stash list --pretty=format:'%><(15,trunc)%Cblue%an%Creset%C(yellow)%gd%Creset %s'
    stl = !git --no-pager stash-list-pretty
    stc = stash-compare # see ~/bin for script


    s = status-short # see ~/bin for script
    sl = status-long # see ~/bin for script

    # Add files
    a = add-enhanced # see ~/bin for script
    # Add All files
    aa = add-enhanced --all
    # Add already staged files that need to be Updated in the staging area
    au = update-index --again
    # UnAdd
    ua = reset HEAD --

    rs = reset
    rs1 = reset HEAD~
    rs2 = reset HEAD~~
    rsh = reset --hard
    rsh1 = reset --hard HEAD~
    rsh2 = reset --hard HEAD~~
    rsm = reset --mixed
    rss = reset --soft
    # ReSet to Remote tracking branch
    rsr = reset @{u}
    rsrh = reset @{u} --hard
    rsrm = reset @{u} --mixed

    # ReBase
    rb = rebase
    rbi = rebase --interactive --autostash
    rbc = rebase --continue
    rba = rebase --abort
    # During a rebase it can be difficult to remember what the original intent
    # of a specific commit is when it's mixed with conflict markers. This shows
    # the original commit being rebased.
    # ReBase Show Original
    rbsho = !git show $(cat .git/rebase-apply/original-commit)

    # Cherry Pick
    cp = cherry-pick
    cpc = cherry-pick --continue
    cpq = cherry-pick --quit
    cpa = cherry-pick --abort

    rl = !git --no-pager reflog --max-count=20
    # RefLog Long
    rll = reflog

    log-pretty = log --pretty=tformat:'%Cgreen%ad%Creset %><(15,trunc)%Cblue%an%Creset %><(9)%C(yellow)%h%Creset %s%C(auto)%d%Creset' --boundary --date=short --graph --decorate=full
    # Log short
    l = !git --no-pager log-pretty --max-count=10
    # Log Compare
    lc = !git log-pretty --graph --left-right # branch...other_branch
    # Log Comparison with Remote branch
    lcr = !git lc @{upstream}...HEAD
    # Log Long
    ll = !git log-pretty
    # Log Long with All branches and refs
    lla = !git ll --all

    # better LoG
    lg = log --boundary --stat --pretty=fuller
    # better LoG with All branches and refs
    lga = !git lg --all

    rmt = remote
    rmta = remote add
    rmtrm = remote rm
    rmtmv = remote rename
    rmtl = remote -v
    rmts = remote show

    # Worktrees were added in v2.6
    wta = !git worktree-add-by-branch
    wtp = worktree prune
    wtl = worktree list # added in v2.7

    sm = submodule
    #IDEA come up with smc alias to run a command on a submodule without having
    #to cd, and if no submodule is specified it will run the command on all the
    #submodules
    # SubModule Update
    smu = submodule update --checkout --init --recursive
    # SubModule PuLl
    # update submodules to the HEAD of their tracking branches and
    smpl = !git submodule update --checkout --init --remote && git smu
    # For submodules that track a remote branch (added v1.8.2) check them out
    # in the branch that they track rather than a detached head state.
    smcob = "!git submodule foreach -q \
        'git checkout \
        $(git config -f $toplevel/.gitmodules submodule.$name.branch)'"


    # a better CLone of a repo making sure it's submodules are initialized and
    # updated
    cl = "!f() { git clone --recursive \"$@\" && git smu; }; f"

    # better PuLl of a repo only if a fast forward is possible, then make sure
    # submodules are updated
    pl = "!f() { git pull \"$@\" && git smu; }; f"
    # PuLl with Rebase
    plr = !git pl --rebase
    # PuLl Force
    plf = !git f && git reset --hard @{u}

    # PuSh
    ps = push
    psn = push --no-verify
    # PuSh Force
    psf = !git ps --force-with-lease
    #PuSh Tags
    pst = !git ps --tags

    cln = !git clean --interactive
    # CLeaN Deep
    clnd = !git clean --interactive -d -x

    # check if a file exist in the repository?
    exists = ls-files --error-unmatch

    # Fix White Space for files that are staged to be committed
    fws = !git diff --cached --no-color > stage.diff && git apply --index -R stage.diff && git apply --index --whitespace=fix stage.diff && rm -f stage.diff

[include]
    path = ~/.gitconfig_local

[user]
    name = Ryan Carney

[push]
    # `simple` is default in v2.0+ and was added v1.7.10. Push mode `simple`
    # only pushes current branch to the one that git pull would pull from only
    # if the names match.  The old default before v2.0 was `matching` option
    # means git will push all of your local branches to matching one in the
    # remote. For these older version of git the `current` mode is most similar
    # it pushes to or creates-then-pushes-to same-named branches on the remote
    # repo for you if they don't exist already
    default = simple

    # Also Push relevant annotated tags (Added in v2.4.1)
    followtags = true

[merge]
    tool = vimdiff
    conflictstyle = diff3

[mergetool]
    prompt = false

[fetch]
    prune = true

[core]
    excludesfile = ~/.config/git/gitignore_global
    hookspath = ~/.config/git/hooks

[commit]
    template = ~/.config/git/gitmessage
    verbose = true

[diff]
    tool = vimdiff

[difftool]
    prompt = false

[alias]
    d = diff --color
    ds = diff --color --cached # Diff Staged

    dt = difftool
    dts = difftool --cached # Diff Tool Staged

    m = merge
    mt = mergetool

    b = branch
    bl = branch --all --verbose # Branch List
    bd = branch --delete # Branch Delete
    bD = branch -D # Branch Delete
    bdr = push origin --delete # Branch Delete Remote
    bc = checkout -b # Branch Create
    bcr = push origin --set-upstream HEAD # Branch Create Remote
    bsu = branch --set-remote
    bco = checkout --orphan # Branch Create Orphan (empty branch)

    # the --verbose flag is equivalent to setting the commit.verbose option
    # but this option is only supported in git v2.9+ so the flag is included in
    # the following aliases instead
    cm = commit --verbose
    cmm = !git cm --message
    cmfu = !git cm --fixup
    cmsq = !git cm --squash
    cma = !git cm --amend --reset-author

    f = fetch
    co = checkout
    sh = show --decorate --stat --patch

    st = stash
    sts = stash show --patch --stat
    stp = stash pop --index
    std = stash drop
    stash-list-pretty = stash list --pretty=format:'%C(yellow)%gd%Creset %s'
    stl = !git --no-pager stash-list-pretty
    stc = stash-compare # see ~/bin for script


    s = status-short # see ~/bin for script
    sl = status-long # see ~/bin for script

    # Add files
    a = add-enhanced # see ~/bin for script
    # Add All files
    aa = add-enhanced --all
    # Stage already staged files that need to be Updated in the staging area
    au = update-index --again

    rs = reset
    rsh = reset --hard
    rsm = reset --mixed
    rss = reset --soft
    # ReSet to Remote tracking branch
    rsr = reset @{u}
    rsrh = reset --hard @{u}
    rsrm = reset --mixed @{u}
    rsrs = reset --soft @{u}

    rb = rebase
    rbi = rebase --interactive --autosquash
    rbc = rebase --continue
    rba = rebase --abort

    rl =  !git --no-pager reflog --max-count=20
    # RefLog Long
    rll = reflog

    log-pretty = log --pretty=tformat:'%><(9)%C(yellow)%h%Creset %Cgreen%ad%Creset %><(15,trunc)%Cblue%an%Creset %s%C(auto)%d%Creset' --boundary --date=short
    # Log short
    l = !git --no-pager log-pretty --max-count=10
    # Log of differences with Remote
    lr = !git --no-pager log-pretty --graph --left-right @{upstream}...HEAD
    # Log Long
    ll = !git log-pretty
    # Log Long with All branches and refs
    lla = !git log-pretty --graph --all

    # better LoG
    lg =  log --decorate --boundary --stat --pretty=fuller
    # better LoG with All branches and refs
    lga = !git lg --graph --all

    rmt = remote
    rmta = remote add
    rmtrm = remote rm
    rmtmv = remote rename
    rmtl = remote -v
    rmts = remote show

    # Worktrees were added in v2.6
    wta = worktree add
    wtp = worktree prune
    wtl = worktree list # added in v2.7

    sm = submodule
    # SubModule Update
    smu = !git submodule update --init --recursive
    # For submodules that track a remote branch (added v1.8.2) check them out
    # in the branch that they track rather than a detached head state.
    # SubModule CheckOut
    smco = "!git submodule foreach -q --recursive \
        'git checkout \
        $(git config -f $toplevel/.gitmodules submodule.$name.branch)'"
    # SubModule Update Remote
    smur = !git smu --remote && git smco

    # a better CLone of a repo making sure it's submodules are initialized and
    # updated
    cl = "!f() { git clone --recursive \"$@\" && git smu; }; f"

    # better Pull of a repo only if a fast forward is possible, then make sure
    # submodules are updated
    pl = "!f() { git pull --ff --ff-only \"$@\" && git smu; }; f"
    plr = !git pl --rebase

    ps = push
    psf = !git ps --force-with-lease

    cln = clean --interactive
    # CLeaN Deep
    clnd = clean --interactive -d -x

    # check if a file  exist in the repository?
    exists = ls-files --error-unmatch

[include]
    path = ~/.gitconfig_local

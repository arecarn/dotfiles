#!/bin/sh

print_usage() {
    echo "\
NAME
    git-rename-author - rename / change the git commiter and author of commits

SYNOPSIS
    git-rename-author [<options>...] <new-name> <new-email> [<revision-range>]

DESCRIPTION
    Rename or change the git commiter and author of commits using
    git-filter-branch. By default the git-rename-author performs the rename on
    all commits the current branch, but can be limited certain commits in the
    current branch using various OPTIONS.

OPTIONS
    -n, --old-name <old-name>
        old author name to limit rename to

    -e, --old-email <old-email>
        old author email to limit rename to

    -f, --force
        git rename-author uses git filter-branch which refuses to start with
        an existing temporary directory or when there are already refs
        starting with refs/original/, unless forced.

    <revision-range>
        Operate only on commits in the specified revision range. When no
        <revision-range> is specified, it defaults to HEAD (i.e. the whole
        history leading to the current commit).  origin..HEAD specifies all
        the commits reachable from the current commit (i.e.  HEAD), but not
        from origin. For a complete list of ways to spell <revision range>,
        see the Specifying Ranges section of gitrevisions(7).


"
}


other_args=''
handle_other_argument(){
    # save all the non-named arguments so they can be reinserted back into the
    # positional parameters at the end of the argument parsing
    other_args="${other_args} '$*'"
}

# default values
force=''
old_email=''
old_name=''

while [ "$#" -gt 0 ]; do
    case "$1" in
        -f|--force)
            force='-f';;

        -n|--old-name)
            old_name="$2";
            shift 1;;

        -e|--old-email)
            old_email="$2";
            shift 1;;

        -h|--help)
            print_usage;
            exit 0;;

        -*)
            echo "unknown option: $1" >&2;
            exit 1;;

        *)
            handle_other_argument "$1";
    esac
    shift 1
done

# reinsert non-named arguments back into positional parameters ($1 $2 ..)
eval set -- "${other_args}"

new_name="$1"
new_email="$2"
shift 2
revision_range="$*"
all_authors=0

if [ -z "${new_email}" ] || [ -z "${new_name}" ]; then
    # not enough arguments
    print_usage
    exit 1
fi

if [ -z "${old_email}" ] && [ -z "${old_name}" ]; then
    all_authors=1
fi

if [ -z "${revision_range}" ]; then
    revision_range='HEAD'
fi


export old_email old_name new_email new_name all_authors
# shellcheck disable=SC2016
# suppress "note: Expressions don't expand in single quotes, use double quotes
#           for that. [SC2016]"
filter='
    set_email() {
        if [ -n "$new_email" ]; then
            GIT_AUTHOR_EMAIL="$new_email"
            export GIT_AUTHOR_EMAIL

            GIT_COMMITTER_EMAIL="$new_email"
            export GIT_COMMITTER_EMAIL

        else
            unset GIT_AUTHOR_EMAIL
            unset GIT_COMMITER_EMAIL
        fi
    }

    set_name() {
        if [ -n "$new_name" ]; then
            GIT_AUTHOR_NAME="$new_name"
            export GIT_AUTHOR_NAME

            GIT_COMMITTER_NAME="$new_name"
            export GIT_COMMITTER_NAME
        else
            unset GIT_AUTHOR_NAME
            unset GIT_COMMITTER_NAME
        fi
    }

    if ([ "GIT_AUTHOR_NAME" = "$old_name" ] || [ "GIT_COMMITTER_NAME" = "$old_name" ]) ||
        ([ "$GIT_AUTHOR_EMAIL" = "$old_email" ] || [ "$GIT_COMMITTER_EMAIL" = "$old_email" ]) ||
        [ "$all_authors" -eq 1 ]; then

        set_name
        set_email
    fi
'

git filter-branch "${force}" --env-filter "${filter}" --tag-name-filter cat \
    -- "${revision_range}" --branches --tags

" -                                                                        {{{
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set cpo&vim
set encoding=utf-8 "make Vim use UTF-8 by default
scriptencoding utf-8
set fileformats=unix,dos

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" UTILITY FUNCTIONS & VARIABLES                                            {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let s:has_windows = has('win16') || has('win32') || has('win64')

if s:has_windows
    let s:vim_path = $HOME . '/vimfiles'
else
    let s:vim_path = $HOME . '/.vim'
endif

if empty($XDG_CACHE_HOME)
    let $XDG_CACHE_HOME = $HOME . '/.cache'
endif
let s:cache_path = $XDG_CACHE_HOME . '/vim/'

if empty($XDG_DATA_HOME)
    let $XDG_DATA_HOME = $HOME . '/.local/share'
endif
let s:data_path = $XDG_DATA_HOME . '/vim/'

function! s:make_private_directory(path) abort
    if !isdirectory(a:path)
        call mkdir(a:path, 'p', 0700)
    endif
endfunction

function! s:make_cache_path(name) abort
    return s:cache_path . a:name
endfunction

function! s:make_data_path(name) abort
    return s:data_path . a:name
endfunction

function! s:make_cache_directory(path) abort
    call s:make_private_directory(s:make_cache_path(a:path))
endfunction

function! s:make_data_directory(path) abort
    call s:make_private_directory(s:make_data_path(a:path))
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" COMMAND LINE                                                             {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set history=10000

set wildmode=full
set wildmenu
set wildcharm=<TAB>

" File Searching
" ignored files
set wildignore=*.o,*.obj,*.pyc,*.DS_Store,*.out,HEAD,*.lst,*.i,*.map,tags*,cscope.out
" lower priority files suffixes
set suffixes=.bak,~,.o,.info,.swp,.obj,.git,.hg,.svn

set path=
set path+=.  " To search relative to the directory of the current file
set path+=,, " To search in the current directory
set path+=** " Relative to the current directory search recursively

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" CURSOR SETTINGS                                                          {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set scrolloff=6 " Keep lines (top/bottom) for scope
set sidescrolloff=6 " Keep lines (side/side) for scope
set sidescroll=3

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

set ttyfast

if ! has('nvim')
    set ttymouse=xterm2
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" UNDO & SWAP                                                              {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set undofile
call s:make_data_directory('undo')
execute 'set undodir=' . s:make_data_path('undo') . '//'
set undolevels=20000
set undoreload=20000
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" BACKUP                                                                   {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set backup

call s:make_data_directory('backup')
let s:backupdir = s:make_data_path('backup') . '//'
execute 'set backupdir=' . s:backupdir

" Double slash does not actually work for backupdir, here's a fix that appends
" the path separated by percents and a time stamp
function! s:backupext() abort
    let time = '_' . strftime('%Y-%m-%d-%H')
    let path_forward_slash_as_percent = substitute(expand('%:p:h'), '/', '%', 'g')
    let path_back_slash_as_percent = substitute(path_forward_slash_as_percent , '\', '%', 'g')
    let path_colon_removed = substitute(path_back_slash_as_percent, ':', '', 'g')
    let path = path_colon_removed
    return '@' . path . time
endfunction

if has('autocmd')
    augroup backupext
        autocmd!
        autocmd BufWritePre * let &backupext=s:backupext()
    augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" LINE WRAPPING                                                            {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nowrap
set linebreak
set textwidth=80
if exists('+breakindent')
    set breakindent
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" SPELLING - THESAURUS                                                     {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set spell
set spelllang=en_us
let &spellfile = s:vim_path . '/utils/spell/spellfile.add'
let &thesaurus = s:vim_path . '/utils/thesaurus/thesaurus.txt'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" TABS, INDENTING & FORMAT OPTIONS                                         {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set smarttab

set autoindent
" these are buffer local let make them everywhere
set formatoptions+=n "recognize lists
set formatlistpat+=\\\|^\\s*[-*]\\s* "recognize lists with * or -
set formatoptions+=j "remove comments leader when joining
set formatoptions-=t "don't auto wrap based on textwidth

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" FOLDING                                                                  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set foldcolumn=2
set foldnestmax=3
set foldlevelstart=99

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" AUTOCMDS                                                                 {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('autocmd')
    augroup vimrc
        autocmd!
        autocmd BufWritePost *vimrc* nested source $MYVIMRC
    augroup END


    augroup AllFiles
        autocmd!
        autocmd FocusLost * silent! wall
    augroup END

    augroup QuickFix
        autocmd!
        " opens quick fix window on the bottom of all screens
        autocmd FileType qf wincmd J

        " Automatically open, but do not go to (if there are errors) the
        " quickfix / location list window, or close it when is has become
        " empty.
        "
        " Note: Must allow nesting of autocmds to enable any customizations for
        " quickfix buffers.
        "
        " Note: Normally, :cwindow jumps to the quickfix window if the command
        " opens it (but not if it's already open). However, as part of the
        " autocmd, this doesn't seem to happen.
        autocmd QuickFixCmdPost [^l]* nested cwindow
        autocmd QuickFixCmdPost    l* nested lwindow
        autocmd FileType qf call s:quick_fix_list_settings()
    augroup END

    function! s:quick_fix_list_settings() abort
        nnoremap <buffer> q  <C-W>q
        nnoremap <buffer> o  <CR><C-W>p
        nnoremap <buffer> S  <C-W><CR><C-W>K
        nnoremap <buffer> s  <C-W><CR><C-W>K<C-W>b
    endfunction

    if s:has_windows
        augroup TEX
            autocmd!
            autocmd BufEnter *.tex setf tex
            " autocmd BufWritePost *.tex cd %:p:h | !start /min pdflatex %:t
            autocmd BufWritePost *.tex cd %:p:h | !start pdflatex %:t
            autocmd BufEnter *.tex setlocal concealcursor=
        augroup END
    else
        augroup TEX
            autocmd!
            autocmd BufWritePost *.tex cd %:p:h | !pdflatex %:t
            autocmd BufEnter *.tex setlocal concealcursor=
        augroup END
    endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" SEARCHING                                                                {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wrapscan
set incsearch
set ignorecase
set smartcase

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" TAGS                                                                     {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tags=tags;/ "search backwards for the tags
set cscoperelative
set cscopequickfix=s-,c-,d-,i-,t-,e-

function! PrintCscopeOptions()
    echo 'g: Definition'
    echo 'c: Functions calling this function'
    echo 'd: Functions called by this function'
    echo 'f: This file'
    echo 'i: Files #including this file'
    echo 's: This C symbol'
    echo 't: This text string'
    echo 'e: This egrep pattern'
endfunction
execute 'nnoremap <Leader>csf :call PrintCscopeOptions()<CR>:cs find '
execute 'nnoremap <Leader>cs :call PrintCscopeOptions()<CR>:cs find   <C-r><C-w><HOME>' . repeat('<Right>',8)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" GENERAL BEHAVIOR                                                         {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax on " allow syntax highlighting
set clipboard=unnamedplus,unnamed
set splitright

" disable dang error{visual}bells for good
if has('autocmd')
    augroup noBells
        autocmd!
        autocmd GUIEnter * set vb t_vb=
        autocmd VimEnter * set vb t_vb=
    augroup END
endif

set switchbuf=usetab
set autowriteall
set autoread
set backspace=indent,eol,start
set virtualedit+=all
set modeline

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" UI OPTIONS                                                               {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set color column based on 'textwidth'
if has('autocmd')
    augroup colorcolumn
        autocmd!
        autocmd BufNewFile,BufWinEnter * let &colorcolumn = (&textwidth == 0 ? 0 : &textwidth + 1)
    augroup END
endif

set background=dark
set confirm
set shortmess+=a
set number
set relativenumber
set showcmd
set lazyredraw
set laststatus=2
set showtabline=2
set list
set listchars=trail:·,tab:→-,extends:▶,precedes:◀
set noshowmode

" Maximize Window on Startup
if has ('gui_running') && has('autocmd') && s:has_windows
    augroup windowsgui:
        autocmd!
        autocmd GUIEnter * simalt ~x " maximize in windows
    augroup END
endif

" Highlight TODO, FIXME, NOTE, etc.
if has('autocmd') && v:version > 701
    augroup todo
        autocmd!
        autocmd Syntax * call matchadd(
                    \ 'Debug',
                    \ '\v\W\zs<(NOTE|INFO|IDEA|TODO|TODO_F|FIXME|CHANGED|XXX|BUG|HACK|TRICKY)>'
                    \ )
    augroup END
endif

" gui settings {{{2
if has ('gui_running')
    " Make GVim more like Terminal Vim
    set guioptions-=T "remove toolbar
    set guioptions-=r "remove right-hand scroll bar
    set guioptions-=l "remove right-hand scroll bar
    set guioptions=c "makes dialogs boxes appear like they do in console vim

    " Set Font
    try
        if s:has_windows
            set guifont=DejaVu_Sans_Mono:h9:cANSI,Lucida_Console:h9:cANSI,Consolas:h9:cANSI
        elseif has('mac')
            set guifont=DejaVu\ Sans\ Mono:h11,Monaco:h11
        elseif has('unix') && !has('mac') "linux
            set guifont=DejaVu\ Sans\ Mono\ 10
        endif
    catch
    endtry
endif "}}}2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" MAPPINGS & COMMANDS                                                      {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set ttimeout
set ttimeoutlen=100
set updatetime=1000

let mapleader="\<Space>"

nnoremap [myleader] <Nop>
xnoremap [myleader] <Nop>
nmap go [myleader]
xmap go [myleader]

cnoremap [cmdleader] <Nop>
cmap <C-j> [cmdleader]

if executable('ag')
    set grepprg=ag\ --vimgrep\ $*
    set grepformat=%f:%l:%c:%m
endif


command! -nargs=+ Grep call s:grep(<q-args>)
function! s:grep(args) abort
    execute 'silent grep! ' . a:args
    redraw!
    execute 'normal! /<C-l>'
endfunction

" Navigation
" make navigation more intuitive
nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')
nnoremap gk k
nnoremap gj j

" replace selection with spaces and enter replace mode
xnoremap gr r<space>gvo<esc>R

nnoremap sal :set hlsearch<CR>:redraw<CR>:substitute///gc<Left><Left><Left>
nnoremap sG :set hlsearch<CR>:redraw<CR>:.,$substitute///gc<Left><Left><Left>
nnoremap sae :set hlsearch<CR>:redraw<CR>:%substitute///gc<Left><Left><Left>

" go to the next number
nnoremap <silent> g<C-a> /\d\+<CR>
" go to the previous number
nnoremap <silent> g<C-x> ?\d\+<CR>

" list spelling corrections
nnoremap sl viW<Esc>a<C-x><C-s><C-p>
map [sl [ssl
map ]sl ]ssl

" underline current line with character of choice
nnoremap <silent> _ :call <SID>under_line()<CR>
function! s:under_line() abort
    let char = escape(nr2char(getchar()), '\')
    normal! yyp
    execute ':s#\m\S.*\S\|\S#\=repeat(''' . char . ''',strlen(submatch(0)))#g'
endfunction

" format wile in insert mode
inoremap <C-F> <ESC>gw{zea

nnoremap <expr> <C-W><C-T> (winnr('$') != 1 ? "<C-W>TgT" : "")

" TODO add to util set
function! s:in(group, item) abort
    if type(a:group) == type('')
        let group = split(a:group, '\zs')
        return index(group, a:item) <= 0
    endif
endfunction

" think of "co" as "change option"
nnoremap como :<C-U>set modifiable!<CR>:set modifiable?<CR>
nnoremap coro :<C-U>set readonly!<CR>:set readonly?<CR>
nnoremap cot :<C-U>set textwidth=
nnoremap cocl :<C-U>setlocal conceallevel=
nnoremap cosw :<C-U>set shiftwidth=
nnoremap <silent> conf :<C-U>call <SID>scratch_toggle()<CR>
function! s:scratch_toggle() abort
    if match(&buftype, '\C\v'.'nofile') != -1
        set buftype-=nofile
    else
        set buftype+=nofile
    endif
endfunction
function! s:format_options_toggle(options) abort
    let options = split(a:options, '\zs')

    for option in options
        if s:in(&formatoptions, option)
            let add_or_subtract = '+='
        else
            let add_or_subtract = '-='
        endif
        execute 'set formatoptions' . add_or_subtract . option
    endfor
    set formatoptions?
endfunction
nnoremap cotw :<C-U>call <SID>format_options_toggle('t')<CR>
nnoremap copw :<C-U>call <SID>format_options_toggle('aw')<CR>

" reselect pasted or last changed text
nnoremap <expr> gvp '`[' . strpart(getregtype(), 0, 1) . '`]'

" redraw even harder
nnoremap <silent><C-l> :redraw!<CR><C-l>

" open my vimrc
nnoremap [myleader]rc :e $MYVIMRC<CR>

nnoremap <C-W>d :bd<CR>

" make more undos possible after leaving insert mode
inoremap <C-u> <C-g>u<C-u>
inoremap <C-w> <C-g>u<C-w>
inoremap <BS> <C-g>u<BS>
inoremap <Del> <C-g>u<Del>
inoremap <End> <C-g>u<End>
inoremap <Space> <C-g>u<Space>

" yank to end of line, kinda like D or C
noremap Y y$

" visual selection text object
xnoremap a/ gn
onoremap a/ gn
xnoremap i/ gn
onoremap i/ gn
xnoremap i? gN
onoremap i? gN
xnoremap a? gN
onoremap a? gN

" disable Ex mode key and use it to repeat the last q macro (love this)
nnoremap Q @q
" replay q macro for each line of a visual selection
xnoremap Q :normal! @q<CR>
" repeat last command for each line of a visual selection
xnoremap . :normal! .<CR>
" repeat last command then go to the next search position
nnoremap <C-n> n.
" repeat last command then go to the previouse search position
nnoremap <C-p> N.
" repeat last command-line command
nnoremap g. @:

" set path to present working directory locally
nnoremap cdl :lcd! %:h<CR>:pwd<CR>
nnoremap cd :cd! %:h<CR>:pwd<CR>

nnoremap <leader>qa :qa!<CR>
nnoremap <leader>q :q!<CR>

" navigation in command line
cnoremap <C-p> <UP>
cnoremap <C-n> <DOWN>
cnoremap <C-b> <LEFT>
cnoremap <C-f> <RIGHT>
cnoremap <C-a> <HOME>
cnoremap <C-e> <END>

" find files easier
cnoremap <C-e> e <C-r>=expand('%:p:h') . '/'<CR>

" fp File Path  (/something/src/foo.txt)
" fpr File Path relative  (src/foo.txt)
" ofn Other File Name (trail)
" ofp Other File Path
" ofpr Other File Path Relative to pwd
" dp Directory Path (head) (/something/src)
" dpr Directory Path Relative to pwd (head) (/something/src)
" pwd Present Working Directory
let extension_patter = '\(\(.\{1,}\.\)\w\+$\)\?'
let maps = [
            \     {
            \         'str': 'fn',
            \         'func': "expand('%:t')"
            \     },
            \     {
            \         'str': 'fp',
            \         'func': "expand('%:p')"
            \     },
            \     {
            \         'str': 'rfp',
            \         'func': "expand('%')"
            \     },
            \     {
            \         'str': 'ofn',
            \         'func': "substitute(expand('%:t'), '"
            \         . extension_patter . "', '\\2', 'g')"
            \     },
            \     {
            \         'str': 'ofp',
            \         'func': "substitute(expand('%:p:r:.'), '"
            \         . extension_patter . "', '\\2', 'g')"
            \     },
            \     {
            \         'str': 'rofp',
            \         'func': "expand('%<') . '.'"
            \     },
            \     {
            \         'str': 'dp',
            \         'func': "expand('%:p:h') . '/'"
            \     },
            \     {
            \         'str': 'rdp',
            \         'func': "expand('%:h') . '/'"
            \     },
            \     {
            \         'str': 'pwd',
            \         'func': 'getcwd()'
            \     }
            \  ]
for map in maps
    execute 'nnoremap <silent> <Leader>y' . map.str . ' ' .
                \ ':let @*=' . map.func . '<CR>' .
                \ ':let @+=' . map.func . '<CR>' .
                \ ':let @"=' . map.func . '<CR>'
    execute 'cnoremap %' . map.str . ' <C-r>=' . map.func . '<CR>'
endfor

" accept completion (requires "set wild charm = <TAB>)
cnoremap <C-y> <SPACE><BS><TAB>

cnoremap ~f ~/Dropbox
cnoremap ~n ~/Dropbox/notes
cnoremap ~df ~/dotfiles
cnoremap ~dfl ~/dotfiles_local
command! -range=0 Ezsh edit ~/.zshrc
command! -range=0 Ezshl edit ~/.zshrc_local
command! -range=0 Egit edit ~/.gitconfig
command! -range=0 Egitl edit ~/.gitconfig_local
command! -range=0 Evim edit $MYVIMRC
command! -range=0 Eviml edit ~/.vimrc_local
command! -range=0 Sovim source $MYVIMRC
command! -range=0 Etmux edit ~/.tmux.conf
command! -range=0 Etodo edit ~/Dropbox/notes/todo.txt
command! -range=0 Einbox edit ~/Dropbox/notes/inbox.md

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" SCRIPTS                                                                  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>m  :call SearchPosition()<CR>
nnoremap <leader>M  :let @/ = ''<CR>
function! SearchPosition()
    if @/ !~# '\v(\\\%\d+[lc](\\\|)?)+'
        let @/ = ''
        " echo "pattern didn't match = ".@/
    else
        let @/ .= '\|'
        " echo "added bar = ".@/
    endif

    let line = getpos('.')[1]
    let col = getpos('.')[2]
    execute "let @/ .= '\\%" . line . "l'"
    execute "let @/ .= '\\%" . col . "c'"
endfunction

nnoremap g** :<C-U>call AddToSearch('n')<CR>
xnoremap g* :<C-U>call AddToSearch('x')<CR>
function! AddToSearch(mode)
    let save_reg = @@
    if @/ !=# ''
        let @/ .= '\|'
    endif
    if a:mode ==# 'x'
        normal! gvy
    elseif a:mode ==# 'n'
        normal! yiw
    else
        let @@ = save_reg
    endif
    let @/ .= @@
    let @@ = save_reg
endfunction

nnoremap <Leader>tp :ptjump <C-r><C-w><CR>

" reverse selection kind of works
vnoremap <silent> <leader>is :<c-u>let old_reg_a=@a<cr>
            \:let old_reg=@"<cr>
            \gv"ay
            \:let @a=substitute(@a, '.\(.*\)\@=',
            \ '\=@a[strlen(submatch(1))]', 'g')<CR>
            \gvc<C-R>a<Esc>
            \:let @a=old_reg_a<CR>
            \:let @"=old_reg<CR>


command! -nargs=* -range=0 -bang Seq
            \ call Seq(<count>, <line1>, <line2>, <q-args>, "<bang>")

function! Seq(count, first_line, last_line, cmdInput, bang) abort
    " anything within backticks
    let rg_expr = '`\(.\{-1,}\)`'

    " 1 index if ! is used
    if a:bang !=# '!'
        let x = 0
    else
        let x = 1
    endif

    let @a = ''
    let r = ''
    for i in range(0, a:last_line-a:first_line) "TODO fails without a range
        let l:line = substitute(a:cmdInput, rg_expr, '\=eval(submatch(1))', 'g')
        echomsg l:line
        " call append(i+a:first_line, line)
        let r = r.l:line."\n"
        echomsg r
        let x = x + 1
    endfor
    call setreg('a', r,  'b')
    normal! "aP
endfunction

command! -nargs=* -range=0 -bang Renumber
            \ call <SID>renumber(<line1>, <line2>, "<bang>")
function! s:renumber(first_line, last_line, bang) abort
    let num_expr = '\v\C^.{-}\zs\d+\ze'
    " 0 index if ! is used
    if a:bang !=# '!'
        let s:renumber_index = 1
    else
        let s:renumber_index = 0
    endif

    execute a:first_line.','.a:last_line.'s#'.num_expr.'#\=s:increment()#'
endfunction

function! s:increment() abort
    let old_renumber_index = s:renumber_index
    let s:renumber_index = s:renumber_index + 1
    return old_renumber_index
endfunction

" add numbers to the front or end of a line
cabbrev numend s/$/\=1-line("'<")+line(".")/c
cabbrev numfront s/^/\=1-line("'<")+line(".")/c


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" BEFORE PLUGINS                                                           {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if filereadable(glob('.vimrc_project'))
    source .vimrc_project
endif

if filereadable(glob('~/.vimrc_local', 1))
    source ~/.vimrc_local
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" PLUGINS                                                                  {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" neobundle {{{2
let s:neobundle_path = s:vim_path.'/bundle/neobundle.vim'
if !isdirectory(s:neobundle_path)
    execute '!git clone https://github.com/Shougo/neobundle.vim '
                \ . s:neobundle_path
endif
if has('vim_starting')
    execute 'set runtimepath+='.s:neobundle_path.'/'
endif

call neobundle#begin(expand(s:vim_path.'/bundle'))
" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim' "}}}2

" vimproc.vim {{{2
NeoBundle 'Shougo/vimproc.vim', {
            \ 'build' : {
            \     'windows' : 'make -f make_mingw32.mak',
            \     'cygwin' : 'make -f make_cygwin.mak',
            \     'mac' : 'make -f make_mac.mak',
            \     'unix' : 'make -f make_unix.mak',
            \    },
            \ } "}}}2

" text objects {{{2
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'saihoooooooo/vim-textobj-space'
NeoBundle 'Julian/vim-textobj-variable-segment'
NeoBundle 'coderifous/textobj-word-column.vim'
NeoBundle 'kana/vim-textobj-entire'
NeoBundle 'kana/vim-textobj-indent'
NeoBundle 'kana/vim-textobj-line'
NeoBundle 'mattn/vim-textobj-url'
NeoBundle 'glts/vim-textobj-comment'
NeoBundle 'thinca/vim-textobj-between'
NeoBundle 'osyo-manga/vim-textobj-multiblock'
"}}}2

" unite {{{2
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-outline', {'depends' : 'Shougo/unite.vim'}
NeoBundle 'Shougo/unite-session', {'depends' : 'Shougo/unite.vim'}
NeoBundle 'Shougo/neomru.vim', {'depends' : 'Shougo/unite.vim'}
NeoBundle 'Shougo/neoyank.vim', {'depends' : 'Shougo/unite.vim'}
NeoBundle 'kmnk/unite-command', {'depends' : 'Shougo/unite.vim'}
NeoBundle 'majkinetor/unite-cmdmatch', {'depends' : 'Shougo/unite.vim'}
NeoBundle 'voi/unite-ctags', {'depends' : 'Shougo/unite.vim'}
NeoBundle 'tsukkee/unite-tag', {'depends' : 'Shougo/unite.vim'}
NeoBundle 'thinca/vim-unite-history', {'depends' : 'Shougo/unite.vim'}
NeoBundle 'naquad/unite-digraphs', {'depends' : 'Shougo/unite.vim'} "}}}2
NeoBundle 'junegunn/fzf', {
            \ 'base' : '~/.config/fzf',
            \ 'build' : './install --all'
            \ }
NeoBundle 'dyng/ctrlsf.vim'


" Operators
NeoBundle 'arecarn/mixed-case-operator.vim'
NeoBundle 'kana/vim-operator-replace' , {'depends' : 'kana/vim-operator-user'}
NeoBundle 'tpope/vim-surround'
NeoBundle 'tommcdo/vim-exchange'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-repeat' "}}}2


" Folds
NeoBundle 'arecarn/clean-fold.vim'
NeoBundle 'arecarn/fold-cycle.vim' ",  {'rev' : 'topics/global_fold_cycling'}


" Visual Enhancements
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'chreekat/vim-paren-crosshairs'
NeoBundle 'maman/tmuxline.vim'
NeoBundle 'junegunn/goyo.vim'
NeoBundle 'nathanaelkane/vim-indent-guides'


NeoBundle 'scrooloose/syntastic'


" Vim script Development
NeoBundle 'vim-jp/vital.vim'
NeoBundle 'tpope/vim-scriptease'
NeoBundle 'junegunn/vader.vim'
NeoBundle 'Decho'
NeoBundle 'dbakker/vim-lint', {'depends' : 'scrooloose/syntastic'}


" File Type
NeoBundle 'stephpy/vim-yaml' "and alternative yaml sicne the built in one is slow
NeoBundle 'lopter/moin.vim'
NeoBundle 'confluencewiki.vim'
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'dbeniamine/todo.txt-vim'
NeoBundle 'vim-scripts/scons.vim'
NeoBundle 'hynek/vim-python-pep8-indent'


" Colors
NeoBundle 'morhetz/gruvbox'
NeoBundle 'altercation/vim-colors-solarized'


" Completion
if has('lua') || has('lua/dyn')
    NeoBundle 'Shougo/neocomplete'
else
    NeoBundle 'Shougo/neocomplcache'
endif
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/echodoc.vim'


" Git / VCS
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'int3/vim-extradite', {'depends' : 'tpope/vim-fugitive'}
NeoBundle 'jreybert/vimagit'
NeoBundle 'airblade/vim-rooter'
NeoBundle 'cohama/agit.vim'
NeoBundle 'mhinz/vim-signify'


" Diff
NeoBundle 'AndrewRadev/linediff.vim'
NeoBundle 'diffchanges.vim'
NeoBundle 'arecarn/diff-utils.vim'


" Applications
NeoBundle 'Shougo/vimfiler.vim', {'depends' : 'Shougo/unite.vim'}
NeoBundle 'Shougo/vimshell.vim', {'depends' : 'Shougo/vimproc.vim'}
NeoBundle 'idanarye/vim-vebugger', {'depends' : 'shougo/vimproc.vim'}
NeoBundle 'metakirby5/codi.vim'


" Text Manipulation Commands / Mappings
NeoBundle 'junegunn/vim-easy-align'
NeoBundle 'godlygeek/tabular'
NeoBundle 'arecarn/split-join.vim'
NeoBundle 't9md/vim-textmanip'
NeoBundle 'vim-scripts/FormatToWidth', {'depends' : 'vim-scripts/ingo-library'}

" Enhancements
NeoBundle 'kana/vim-niceblock'
NeoBundle 'tpope/vim-speeddating'
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'vim-scripts/UnconditionalPaste'
NeoBundle 'arecarn/go-to-buffer.vim'
NeoBundle 'arecarn/auto-autoread.vim'
NeoBundle 'thinca/vim-qfreplace'
NeoBundle 'tpope/vim-eunuch'
NeoBundle 'arecarn/spell-utils.vim'
NeoBundle 'tpope/vim-abolish'

" Word Under the Cursor Highlighting
NeoBundle 't9md/vim-quickhl'
NeoBundle 'qstrahl/vim-matchmaker'

" Search
NeoBundle 'junegunn/vim-oblique' , {'depends' : 'junegunn/vim-pseudocl'}

" Utilities
NeoBundle 'talek/obvious-resize'
NeoBundle 'vim-scripts/cmdalias.vim'
NeoBundle 'arecarn/Preserve.vim' "TODO Merge into the true one

" Interactive Tools/Modes
NeoBundle 'dhruvasagar/vim-table-mode'
NeoBundle 'vim-scripts/DrawIt'
NeoBundle 'arecarn/crunch.vim', {'depends' : 'arecarn/selection.vim'}
NeoBundle 'chrisbra/NrrwRgn'
NeoBundle 'mbbill/undotree'

" Window Management
NeoBundle 't9md/vim-choosewin'
NeoBundle 'wesQ3/vim-windowswap'

NeoBundle 'arecarn/binascii.vim'
NeoBundle 'arecarn/frisk.vim'
NeoBundle 'ludovicchabant/vim-gutentags'
NeoBundleFetch 'arecarn/template.vim'
call neobundle#end()
NeoBundleCheck
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" PLUGINS CONFIG                                                           {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if neobundle#is_installed('neocomplcache') "{{{2
    let g:neocomplcache_temporary_dir = s:make_cache_path('neocomplcache')
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_enable_smart_case = 1
    let g:neocomplcache_enable_camel_case_completion = 1
    let g:neocomplcache_enable_underbar_completion = 1
    let g:neocomplcache_min_syntax_length = 2
    let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
    let g:neocomplcache_enable_auto_delimiter = 1
    let g:neocomplcache_max_list = 100
    let g:neocomplcache_tags_caching_limit_file_size = 5000000000000000.0
    let g:neocomplcache_dictionary_filetype_lists = {
                \ 'default' : '',
                \ 'vimshell' : s:cache_path.'/vimshell/command-history'
                \ }

    " Define keyword, for minor languages
    if !exists('g:neocomplcache_keyword_patterns')
        let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns['default'] = '\h\w*'


    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
        " return neocomplcache#smart_close_popup() . "\<CR>"
        return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

    " Enable heavy omni completion.
    " if !exists('g:neocomplcache_omni_patterns')
    "     let g:neocomplcache_omni_patterns = {}
    " endif
    " let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    " let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
    " let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    " let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    " let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
    " nnoremap conc :NeoComplCacheToggle<CR>
endif "}}}2

if neobundle#is_installed('neocomplete') "{{{2
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1

    augroup NEOCOMPLETE
        autocmd!
        autocmd FileType gitcommit let g:neocomplete#enable_auto_close_preview = 0
    augroup END

    nnoremap conc :NeoCompleteToggle<CR>

    let g:neocomplete#disable_auto_complete = 0
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#enable_camel_case = 1
    let g:neocomplete#enable_under_bar = 1
    let g:neocomplete#enable_auto_delimiter = 1
    let g:neocomplete#sources#tags#cache_limit_size = 5000000000000000.0
    let g:neocomplete#max_list = 20
    let g:neocomplete#data_directory = s:make_cache_path('neocomplete')

    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
                \ 'default' : '',
                \ 'vimshell' : $HOME.'/.vimshell_hist',
                \ 'scheme' : $HOME.'/.gosh_completions'
                \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings
    inoremap <expr><C-g> neocomplete#undo_completion()

    " Search from neocomplete, omni candidates, vim keywords.
    let g:neocomplete#fallback_mappings = ["\<C-x>\<C-o>", "\<C-x>\<C-n>"]

    " For smart TAB completion.
    function! s:check_back_space() "{{{
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction
    imap <expr><TAB>
                \ pumvisible() ? "\<C-n>" :
                \  (
                \      <SID>check_back_space() ? "\<TAB>" :
                \      neocomplete#start_manual_complete()
                \  )

    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><CR>  pumvisible() ? neocomplete#close_popup() : "\<CR>"
    inoremap <expr><C-e>  neocomplete#cancel_popup()

    augroup omni_completion
        autocmd!
        " Enable omni completion.
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
    augroup END

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif

    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

    " For perlomni.vim setting.
    " https://github.com/c9s/perlomni.vim
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
endif "}}}2

if neobundle#is_installed('neosnippet-snippets') "{{{2
    imap <C-e> <Plug>(neosnippet_expand_or_jump)
    smap <C-e> <Plug>(neosnippet_expand_or_jump)
    xmap <C-e> <Plug>(neosnippet_expand_target)

    imap <expr><CR>
                \ pumvisible() ?
                \ (
                \     neosnippet#expandable() ?
                \     "\<Plug>(neosnippet_expand)" :
                \     neocomplete#close_popup()
                \ ) :
                \ ("\<CR>")


    function! s:check_back_space() "{{{
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    if has('conceal')
        set conceallevel=2 concealcursor=i
    endif

    let g:neosnippet#snippets_directory = s:vim_path.'/utils/snippets'
    let g:neosnippet#data_directory = s:make_cache_path('neosnippet')
endif "}}}2

if neobundle#is_installed('unite.vim') "{{{2
    let g:unite_data_directory = s:make_cache_path('unite')
    let g:unite_winheight = 10
    let g:unite_source_history_yank_enable = 1
    let g:unite_source_history_yank_limit = 100
    let g:unite_split_rule = 'botright'
    call unite#filters#matcher_default#use(['matcher_fuzzy'])
    call unite#filters#sorter_default#use(['sorter_rank'])
    call unite#custom#source('file_rec/async', 'max_candidates', 0)
    call unite#custom#profile('files', 'filters', 'sorter_rank')

    let s:unite_sources = 'file_rec/git,file_rec,file_rec/async,file_mru,file,grep'
    call unite#custom#source(
                \ s:unite_sources,
                \ 'ignore_pattern',
                \ join(
                \     [
                \      '\.git.*',
                \      '\.hg.*',
                \      '\.svn.*',
                \      '\.Trash*',
                \      '*.ini',
                \      '*.dbx',
                \      '*.cache',
                \      'tags.*',
                \     ],
                \     '\|'
                \ ))

    let s:unite_ignore_globs = &wildignore.','.substitute(&suffixes, '\.', '*.', 'g')
    call unite#custom#source(
                \ s:unite_sources,
                \ 'ignore_globs',
                \ split(s:unite_ignore_globs, ',')
                \ )

    let s:unite_grep_excludes = substitute(s:unite_ignore_globs, '^\|,', ' --exclude=', 'g')
    let g:unite_grep_excludes  = s:unite_grep_excludes

    if executable('ag')
        " Use ag (the silver searcher)
        " https://github.com/ggreer/the_silver_searcher
        let g:unite_source_grep_command = 'ag'
        let g:unite_source_grep_default_opts =
                    \ '-i --vimgrep --hidden --ignore ' .
                    \ '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
        let g:unite_source_grep_recursive_opt = ''
    elseif executable('grep')
        let g:unite_source_grep_command = 'grep'
        let g:unite_source_grep_default_opts = '-InHPR ' . '--exclude-dir={.git,.hg,.svn}'
        "                                        |||||
        " -I ignore binary files-----------------+||||
        " -n print line numbers-------------------+|||
        " -H print filename with match--------------||
        " -P Perl Regex-----------------------------+|
        " -R Recursive-------------------------------+
    endif

    if executable('ag')
        " Using ag as recursive command.
        let g:unite_source_rec_async_command =
                    \ ['ag', '--follow', '--nocolor', '--nogroup',
                    \  '--hidden', '-g', '']
    endif

    augroup unite
        autocmd!
        autocmd FileType unite call s:unite_settings()
    augroup END
    function! s:unite_settings()
        nnoremap <silent><buffer><expr> <C-s> unite#do_action('split')
        nnoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
        nnoremap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
        nnoremap <silent><buffer><expr> <C-g> unite#do_action('goto')
    endfunction
    let g:unite_source_menu_menus = {}
    let g:unite_source_menu_menus.interpreters = {
                \     'description' : 'Interpreter Menu',
                \ }
    let g:unite_source_menu_menus.interpreters.command_candidates = [
                \   ['VimShell', 'VimShell -split'],
                \   ['bc', 'VimShellInteractive bc'],
                \   ['octave', 'VimShellInteractive octave'],
                \   ['python', 'VimShellInteractive python'],
                \   ['ipython', 'VimShellInteractive ipython --colors=NoColor'],
                \ ]

    xnoremap [myleader]g  y:<C-u>Unite -no-quit grep:.<CR><C-r>=escape(expand(@@), ' ')<CR><CR>
    nnoremap [myleader]g  :<C-u>Unite -no-quit grep:.<CR>
    nnoremap [myleader]gw :<C-u>UniteWithCursorWord -no-quit grep:.<CR>
    nnoremap [myleader]f :<C-u>Unite file_rec/git file_rec/async -start-insert -unique -input=<CR>
    nnoremap [myleader]rg :<C-u>Unite register -vertical<CR>
    nnoremap [myleader]b  :<C-u>Unite buffer:! -start-insert<CR>
    nnoremap [myleader]i  :<C-u>Unite menu:interpreters<CR>
    nnoremap [myleader]l  :<C-u>Unite line -start-insert<CR>
    nnoremap [myleader]ps :<C-u>Unite process -start-insert<CR>
    nnoremap [myleader]ur :<C-u>UniteResume<CR>
    command! Messages Unite output:message

    if neobundle#is_installed('neomru.vim')
        nnoremap [myleader]r  :<C-u>Unite file_mru -start-insert<CR>

        let g:neomru#file_mru_path = s:make_cache_path('neomru/file')
        let g:neomru#directory_mru_path = s:make_cache_path('neomru/directory')
    endif

    if neobundle#is_installed('unite-outline')
        nnoremap [myleader]o  :<C-u>Unite outline<CR>
    endif

    if neobundle#is_installed('unite-help')
        nnoremap [myleader]h  :<C-u>Unite help -start-insert<CR>
    endif

    if neobundle#is_installed('unite-session')
        nnoremap [myleader]s  :<C-u>Unite -input=session<CR>
    endif

    if neobundle#is_installed('unite-cmdmatch')
        nnoremap [myleader]hc :<C-u>Unite cmdmatch history/command<CR>
    endif

    nnoremap [myleader]hs :<C-u>Unite history/search<CR>

    if neobundle#is_installed('neoyank.vim')
        nnoremap [myleader]p  :<C-u>Unite history/yank<CR>
        xnoremap [myleader]p  dk:<C-u>Unite history/yank<CR>

        let g:neoyank#file = s:make_data_path('neoyank/history')
    endif

    if neobundle#is_installed('neobundle.vim')
        nnoremap [myleader]up :<C-u>Unite neobundle/update -tab<CR>
    endif

    if neobundle#is_installed('unite-tag')
        nnoremap [myleader]t  :<C-u>UniteWithCursorWord tag<CR>
    endif


    if neobundle#is_installed('unite-spell-suggest')
        nnoremap [myleader]gs  :<C-u>Unite spell_suggest<CR>
    endif


    if neobundle#is_installed('unite-digraphs')
        command! Digraphs Unite digraphs
    endif

    " toggle the preview window when I press the "p" key.
    augroup unite_settings
        autocmd!
        autocmd FileType unite call s:unite_settings()
    augroup END
    function! s:unite_settings()
        nnoremap <silent><buffer><expr> p
                    \ empty(filter(range(1, winnr('$')),
                    \ 'getwinvar(v:val, "&previewwindow") != 0')) ?
                    \ unite#do_action('preview') : ":\<C-u>pclose!\<CR>"
        nnoremap <silent><buffer><expr> O unite#do_action('persist_open')
    endfunction
endif "}}}2

if neobundle#is_installed('vimfiler.vim') "{{{2
    " Replace entry commands with Vimfiler
    let g:loaded_netrw = 1
    let g:loaded_netrwPlugin = 1
    let g:vimfiler_as_default_explorer = 1
    let g:vimfiler_data_directory = s:make_cache_path('vimfiler')

    command! -nargs=* Explore :VimFilerBufferDir <Args>
    command! -nargs=* Sexplore :VimFilerBufferDir -split -horizontal <Args>
    command! -nargs=* Vexplore :VimFilerBufferDir -split  <Args>
    command! -nargs=* Texplore :VimFilerBufferDir -tab <Args>
else
    " setup netrw
    " set up line numbering and other good stuff
    let g:netrw_bufsettings = 'noma nomod rnu nobl nowrap ro'

endif "}}}2

if neobundle#is_installed('vimshell.vim') "{{{2
    nnoremap <silent> [myleader]sh
                \ :<C-u>topleft 15split<CR>:<C-u>VimShellCurrentDir<CR>

    nnoremap <silent> [myleader]shv
                \ :<C-u>vsplit<CR>:<C-u>VimShellCurrentDir<CR>

    nnoremap <silent> [myleader]shs
                \ :<C-u>split<CR>:<C-u>VimShellCurrentDir<CR>

    let g:vimshell_enable_start_insert = 1
    let g:vimshell_vimshrc_path = s:vim_path.'/utils/vimshell/vimshellrc'
    let g:vimshell_data_directory = s:make_cache_path('vimshell')
    let g:vimshell_editor_command = 'gvim'

    command! -nargs=* VshSend call RunInVimShell('<Args>') "{{{3
    function! RunInVimShell(cmd)
        VimShellBufferDir -popup
        execute 'VimShellSendString ' . a:cmd
    endfunction "}}}3

endif "}}}2

if neobundle#is_installed('echodoc.vim') "{{{2
    let g:echodoc_enable_at_startup=1
    set cmdheight=2

endif "}}}2

if neobundle#is_installed('vim-oblique') "{{{2
    let g:oblique#incsearch_highlight_all = 1
endif "}}}2

if neobundle#is_installed('vim-fugitive') "{{{2
    nnoremap <Leader>gs :Gstatus<CR>
    nnoremap <Leader>gd :Gdiff<CR>
    nnoremap <Leader>gc :Gcommit<CR>
    nmap <Leader>gj <C-W>P<C-N>D
    nmap <Leader>gk <C-W>P<C-P>D

    " Jump to last known cursor position on BufReadPost {{{
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " NOTE: read viminfo/marks, but removed: causes issues with jumplist sync
    " across Vim instances
    " \   rviminfo |
    " NOTE: removed for SVN commit messages: && fnamemodify(bufname('%'), ':t') != 'svn-commit.tmp'
    " ref: :h last-position-jump
    fun! AutojumpLastPosition()
        if ! exists('b:autojumped_init')
            let b:autojumped_init = 1
            if &ft !=# 'gitcommit' && &ft !=# 'diff' && ! &diff && line("'\"") <=# line('$') && line("'\"") > 0
                " NOTE: `zv` is ignored with foldlevel in modeline.
                exe 'normal! g`"zv'
            endif
        endif
    endfun

    " Follow symlinks when opening a file {{{
    " NOTE: this happens with directory symlinks anyway (due to Vim's chdir/getcwd
    "       magic when getting filenames).
    " Sources:
    "  - https://github.com/tpope/vim-fugitive/issues/147#issuecomment-7572351
    "  - http://www.reddit.com/r/vim/comments/yhsn6/is_it_possible_to_work_around_the_symlink_bug/c5w91qw
    function! MyFollowSymlink(...)
        if exists('w:no_resolve_symlink') && w:no_resolve_symlink
            return
        endif
        if &ft ==# 'help'
            return
        endif
        let fname = a:0 ? a:1 : expand('%')
        if fname =~# '^\w\+:/'
            " Do not mess with 'fugitive://' etc.
            return
        endif
        let fname = simplify(fname)

        let resolvedfile = resolve(fname)
        if resolvedfile == fname
            return
        endif
        let resolvedfile = fnameescape(resolvedfile)
        let sshm = &shm
        set shortmess+=A  " silence ATTENTION message about swap file (would get displayed twice)
        redraw  " Redraw now, to avoid hit-enter prompt.
        exec 'file ' . resolvedfile
        let &shm=sshm

        call AutojumpLastPosition()
        unlet! b:git_dir
        call fugitive#detect(resolvedfile)

        if &modifiable
            " Only display a note when editing a file, especially not for `:help`.
            redraw  " Redraw now, to avoid hit-enter prompt.
            echomsg 'Resolved symlink: =>' resolvedfile
        endif
    endfunction
    command! -bar FollowSymlink call MyFollowSymlink()
endif "}}}2

if neobundle#is_installed('frisk.vim') "{{{2
    call frisk#AddEngine('yahoo', 'http://search.yahoo.com/search?p=')

    command! Rfrisk call ReloadFrisk()
    " Do the stuff for frisk
    function! ReloadFrisk()
        Runtime ~/Dropbox/projects/frisk/gc/frisk/plugin/*.vim
        Runtime ~/Dropbox/projects/frisk/gc/frisk/autoload/*.vim
        Runtime ~/Dropbox/projects/frisk/gc/frisk/autoload/frisk/*.vim
    endfunction
endif "}}}2

if neobundle#is_installed('tabular') "{{{2
    nnoremap <Leader>a :Tabularize/
    xnoremap <Leader>a :Tabularize/
endif "}}}2

if neobundle#is_installed('vim-anzu') "{{{2
    if neobundle#is_installed('unite.vim')
        nnoremap [myleader]/ :<C-u>Unite anzu<CR>
    endif
endif "}}}2

if neobundle#is_installed('vim-table-mode') "{{{2
    let g:table_mode_corner = '|'
endif "}}}2

if neobundle#is_installed('vim-indent-guides') "{{{2
    nmap <silent> coig <Plug>IndentGuidesToggle
    let g:indent_guides_enable_on_vim_startup = 0
    let g:indent_guides_default_mapping = 0
    let g:indent_guides_guide_size = 1
    let g:indent_guides_start_level = 2
endif "}}}2

if neobundle#is_installed('syntastic') "{{{2
    let g:syntastic_check_on_open = 0
    " let g:syntastic_python_checkers = ['python', 'pylint']
    let g:syntastic_python_checkers = ['python']
    nnoremap cost :SyntasticToggleMode<CR>
endif "}}}2

if neobundle#is_installed('vim-textmanip') "{{{2
    xmap <C-j> <Plug>(textmanip-move-down)
    xmap <C-k> <Plug>(textmanip-move-up)
    xmap <C-h> <Plug>(textmanip-move-left)
    xmap <C-l> <Plug>(textmanip-move-right)

    xmap g<C-j> <Plug>(textmanip-duplicate-down)
    xmap g<C-k> <Plug>(textmanip-duplicate-up)
    xmap g<C-h> <Plug>(textmanip-duplicate-left)
    xmap g<C-l> <Plug>(textmanip-duplicate-right)

    xmap gb<C-j> <Plug>(textmanip-blank-below)
    xmap gb<C-k> <Plug>(textmanip-blank-above)

    " toggle insert/replace with
    nmap cotm <Plug>(textmanip-toggle-mode)
endif "}}}2

if neobundle#is_installed('vim-quickhl') "{{{2
    nmap m <Plug>(quickhl-manual-this)
    nnoremap gm m
    nnoremap gm m
    xmap m <Plug>(quickhl-manual-this)
    nmap M <Plug>(quickhl-manual-reset)
    xmap M <Plug>(quickhl-manual-reset)
endif "}}}2

if neobundle#is_installed('vim-easymotion') "{{{2
    map <Nop> <Plug>(easymotion-prefix)
    map g/ <Plug>(easymotion-sn)
    map g? <Plug>(easymotion-sn)

    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_do_mapping = 0
endif "}}}2

if neobundle#is_installed('vim-choosewin') "{{{2
    nmap <C-w>? <Plug>(choosewin)
    let g:choosewin_overlay_enable = 1
    let g:choosewin_overlay_clear_multibyte = 1
    let g:choosewin_statusline_replace = 0
endif "}}}2

if neobundle#is_installed('cmdalias.vim') "{{{2
    command! Pwf echo expand('%:p')
    augroup VIMRC_aliases
        autocmd!
        autocmd VimEnter * Alias pwf Pwf
        autocmd VimEnter * Alias ex Explore
        autocmd VimEnter * Alias sex Sexplore
        autocmd VimEnter * Alias tex Texplore
        autocmd VimEnter * Alias vex Vexplore
    augroup END
endif "}}}2

if neobundle#is_installed('FormatToWidth') "{{{2
    xmap gQ <Plug>FormatToWidth
endif "}}}2

if neobundle#is_installed('linediff.vim') "{{{2
    xnoremap <Leader>ld :Linediff<CR>
endif "}}}2

if neobundle#is_installed('vim-textobj-between') "{{{2
    if neobundle#is_installed('vim-textobj-between')
        let g:textobj_between_no_default_key_mappings = 1
        xmap am <Plug>(textobj-between-a)
        omap am <Plug>(textobj-between-a)
        xmap im <Plug>(textobj-between-i)
        omap im <Plug>(textobj-between-i)
    endif
endif "}}}2

if neobundle#is_installed('vim-textobj-comment') "{{{2
    let g:textobj_comment_no_default_key_mappings = 1
    xmap a# <Plug>(textobj-comment-a)
    omap a# <Plug>(textobj-comment-a)
    xmap i# <Plug>(textobj-comment-i)
    omap i# <Plug>(textobj-comment-i)
endif "}}}2

if neobundle#is_installed('vim-table-mode') "{{{2
    let g:table_mode_separator = '|'
endif "}}}2

if neobundle#is_installed('undotree') "{{{2
    nnoremap [myleader]ut :UndotreeToggle<CR>:UndotreeFocus<CR>
endif "}}}2

if neobundle#is_installed('goyo.vim') "{{{2
    nnoremap cof :<C-u>call SetGoyo(v:count)<CR>

    function! s:goyo_enter()
        let b:wrap_cache = &wrap
        let b:list_cache = &list
        let &wrap = 1
        let &list = 0
    endfunction

    function! s:goyo_leave()
        let &wrap = b:wrap_cache
        let &list = b:list_cache
    endfunction

    augroup augroup_name
        autocmd!
        autocmd User GoyoEnter nested call <SID>goyo_enter()
        autocmd User GoyoLeave nested call <SID>goyo_leave()
    augroup END
    function! SetGoyo(num)
        if a:num == 0
            Goyo
        else
            execute 'Goyo ' . string(a:num)
        endif


    endfunction
endif "}}}2

if neobundle#is_installed('scons.vim') "{{{2
    augroup SCONS
        autocmd!
        autocmd BufNewFile,BufRead SCons*,scons* set filetype=scons
    augroup END
endif "}}}2

if neobundle#is_installed('todo.txt-vim') "{{{2
    augroup TODO_TXT
        autocmd!
        autocmd BufNewFile,BufRead *todo.txt,*done.txt set filetype=todo
        autocmd BufNewFile,BufRead todo*.txt,done*.txt set filetype=todo
        autocmd FileType todo call s:todo_txt_settings()
    augroup END

    function! s:get_context(line) abort "{{{3
        return matchstr(getline(a:line), '@[^ ]\+')
    endfunction "}}}3

    function! s:get_project(line) abort "{{{3
        return matchstr(getline(a:line), '+[^ ]\+')
    endfunction "}}}3

    function! Todo_fold_text(foldchar) "{{{3
        let line = s:get_context(v:foldstart)
        let lines_count = v:foldend - v:foldstart + 1
        let lines_count_text = '| ' . printf('%10s', lines_count . ' todos') . ' |'
        let foldtextstart = strpart(line, 0, (winwidth(0)*2)/3)
        let foldtextend = lines_count_text . repeat(a:foldchar, 8)
        let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
        return foldtextstart . repeat(a:foldchar, winwidth(0)-foldtextlength) . foldtextend
    endfunction "}}}3

    function! Todo_fold(lnum) "{{{3
        let this_context = s:get_context(a:lnum)
        let next_context = s:get_context(a:lnum - 1)

        let fold_level = '0'

        if this_context ==# next_context
            let fold_level = '1'
        else
            let fold_level = '>1'
        endif

        return fold_level
    endfunction "}}}3

    function! s:todo_txt_settings() abort "{{{3
        try
            execute "iunmap <buffer> date\<TAB>"
            iunmap <buffer> due:
        catch
        endtry

        " update time
        " TODO fix issue where search pattern leaks into search history
        nnoremap <localleader>ud :s/\d\d\d\d-\d\d\-\d\d/\=strftime("%Y-%m-%d")/<CR>

        setlocal foldmethod=expr
        setlocal foldexpr=Todo_fold(v:lnum)
        setlocal foldtext=Todo_fold_text('_')
        setlocal iskeyword+=+,-,.
        setlocal iskeyword+=@-@ " add literal @

        if neobundle#is_installed('neocomplete') "{{{3
            " use iskeyword characters in neocompletion
            let keyword_patterns = {}
            let keyword_patterns.todo = '\k\+'
            call neocomplete#custom#source('buffer',
                        \ 'keyword_patterns', keyword_patterns)
        endif
    endfunction "}}}3
endif "}}}2

if neobundle#is_installed('obvious-resize') "{{{2
    " map F9 - F12 (like hjkl) to resize windows
    nnoremap  <silent><F9>  :ObviousResizeLeft<CR>
    nnoremap  <silent><F10> :ObviousResizeDown<CR>
    nnoremap  <silent><F11> :ObviousResizeUp<CR>
    nnoremap  <silent><F12> :ObviousResizeRight<CR>
endif "}}}2

if neobundle#is_installed('Preserve.vim') "{{{2
    command! -range=% Dlead :PreserveSave|<line1>,<line2>s,^\s\+,,ge|PreserveRestore
    nnoremap <silent><leader>dl :Dlead<CR>
    command! -range=% Dtrail :PreserveSave|<line1>,<line2>s,\s\+$,,ge|PreserveRestore
    nnoremap <silent><leader>dt :Dtrail<CR>
    nnoremap =ae :call Preserve("normal! gg=G")<CR>
    nnoremap =ie :call Preserve("normal! gg=G")<CR>
    nnoremap yae :call Preserve("normal! ggyG")<CR>
    nnoremap yie :call Preserve("normal! ggyG")<CR>
endif "}}}2

if neobundle#is_installed('moin.vim') "{{{2
    augroup MOIN
        autocmd!
        autocmd BufNewFile,BufRead *.moin set filetype=moin
    augroup END
endif "}}}2

if neobundle#is_installed('confluencewiki.vim') "{{{2
    augroup MOIN
        autocmd!
        autocmd BufNewFile,BufRead *.jira set filetype=confluencewiki
    augroup END
endif "}}}2

if neobundle#is_installed('crunch.vim') "{{{2
    let g:crunch_user_variables = {'e': exp(1),  'pi':3.14159265359}
    let g:crunch_result_type_append = 2
endif "}}}2

if neobundle#is_installed('golden-ratio') "{{{2
    let g:golden_ratio_autocommand = 0
    nmap <silent> <C-w>g <Plug>(golden_ratio_resize)
endif "}}}2

if neobundle#is_installed('vim-surround') "{{{2
    " custom surround using :
    let g:surround_58 = "\1Surround\1\r\1\1"
endif "}}}2

if neobundle#is_installed('clean-fold.vim') "{{{2
    set foldmethod=expr
    set foldtext=clean_fold#fold_text_minimal()
    set foldexpr=clean_fold#fold_expr(v:lnum)
else
    set foldmethod=indent
endif "}}}2

if neobundle#is_installed('vim-matchmaker') "{{{2
    nnoremap comm :MatchmakerToggle<CR>
    augroup match_maker
        autocmd!
        autocmd Syntax,BufNewFile,BufEnter,BufRead * highlight clear Matchmaker | highlight Matchmaker term=underline cterm=reverse  gui=reverse
    augroup END
endif "}}}2

if neobundle#is_installed('vim-rooter') "{{{2
    let g:rooter_manual_only = 1
    let g:rooter_disable_map = 1
    let g:rooter_use_lcd = 0
    map <silent> cdp <Plug>RooterChangeToRootDirectory
endif "}}}2

if neobundle#is_installed('vim-unite-giti') "{{{2
    nnoremap [myleader]git :<C-u>Unite giti -start-insert<CR>
endif "}}}2

if neobundle#is_installed('fold-cycle.vim') "{{{2
    let g:fold_cycle_default_mapping = 0
    nmap zo <Plug>(fold-cycle-open)
    nmap zc <Plug>(fold-cycle-close)
    " nmap zr <Plug>(fold-cycle-open-global)
    " nmap zm <Plug>(fold-cycle-close-global)
endif "}}}2

if neobundle#is_installed('vim-operator-replace') "{{{2
    map g" <Plug>(operator-replace)
endif "}}}2

if neobundle#is_installed('gruvbox') "{{{2
    colorscheme gruvbox
endif "}}}2

if neobundle#is_installed('lightline.vim') "{{{2
    let g:lightline = {
                \ 'colorscheme': 'default',
                \ 'active': {
                \     'left': [['mode', 'paste'], ['fugitive', 'filename']]
                \ },
                \ 'component_function': {
                \     'modified': 'Lightline_modified',
                \     'readonly': 'Lightline_readonly',
                \     'fugitive': 'Lightline_fugitive',
                \     'filename': 'Lightline_filename',
                \     'fileformat': 'Lightline_fileformat',
                \     'filetype': 'Lightline_filetype',
                \     'fileencoding': 'Lightline_fileencoding',
                \     'mode': 'Lightline_mode',
                \ }}

    function! Lightline_modified() abort
        return &ft =~# 'help\|vimfiler' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! Lightline_readonly() abort
        return &ft !~? 'help\|vimfiler' && &readonly ? 'RO' : ''
    endfunction

    function! Lightline_filename() abort
        return ('' !=# Lightline_readonly() ? Lightline_readonly() . ' ' : '') .
                    \ (&ft ==# 'vimfiler' ? vimfiler#get_status_string() :
                    \  &ft ==# 'unite' ? unite#get_status_string() :
                    \  &ft ==# 'vimshell' ? vimshell#get_status_string() :
                    \ '' !=# expand('%') ? expand('%') : '[No Name]') .
                    \ ('' !=# Lightline_modified() ? ' ' . Lightline_modified() : '')
    endfunction

    function! Lightline_fugitive() abort
        if &ft !~? 'vimfiler' && exists('*fugitive#head')
            let branch = fugitive#head()
            return branch !=# '' ? '±'.branch : ''
        endif
        return ''
    endfunction

    function! Lightline_fileformat() abort
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! Lightline_filetype() abort
        return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

    function! Lightline_fileencoding() abort
        return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction

    function! Lightline_mode() abort
        return winwidth(0) > 70 ? lightline#mode() : ''
    endfunction
endif "}}}2

if neobundle#is_installed('tmuxline.vim')
            \ && ($TERM ==# 'screen' || $TERM ==# 'screen-256color')
            \ && !empty($TMUX)  "{{{2

    let g:tmuxline_powerline_separators = 0
    let g:tmuxline_separators = {
                \ 'left' : '',
                \ 'left_alt': '|',
                \ 'right' : '',
                \ 'right_alt' : '|',
                \ 'space' : ' '}

    augroup tmuxline
        autocmd!
        autocmd VimEnter * call s:set_up_tmuxline()
    augroup END

    function! s:set_up_tmuxline() abort
            Tmuxline lightline
            TmuxlineSnapshot! ~/.cache/tmux/statusline.conf
    endfunction
endif "}}}2

if neobundle#is_installed('vim-easy-align') "{{{2
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
endif "}}}2


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
" -                                                                        {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim: textwidth=78
" vim: foldmethod=marker
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
